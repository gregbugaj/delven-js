// Generated from ECMAScriptParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ECMAScriptParserVisitor = require('./ECMAScriptParserVisitor').ECMAScriptParserVisitor;

var ECMAScriptParserBase = require('./ECMAScriptParserBase').ECMAScriptParserBase;

var grammarFileName = "ECMAScriptParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u008a\u04a9\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0003\u0002\u0005\u0002\u00be\n\u0002\u0003",
    "\u0002\u0005\u0002\u00c1\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00db\n\u0004\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00df\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0006\u0006\u00e4\n\u0006\r\u0006\u000e\u0006\u00e5\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u00f1\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0005\b\u00f9\n\b\u0003\b\u0003\b\u0005\b\u00fd\n\b\u0003\b",
    "\u0003\b\u0003\b\u0005\b\u0102\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u0108\n\t\f\t\u000e\t\u010b\u000b\t\u0003\t\u0003\t\u0005\t\u010f",
    "\n\t\u0005\t\u0111\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u0119\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u011d\n\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u0125\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u012a\n",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u0133\n\u000e\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u0137\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u013f\n\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u0143\n\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u0148\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0151\n",
    "\u0012\f\u0012\u000e\u0012\u0154\u000b\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0159\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0168",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u017c\n\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u0180\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0184\n\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u018c\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0195\n\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u019a\n\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u01a2\n\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0005\u0019\u01a9\n\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01b0\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01b7\n",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u01c9",
    "\n\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01cd\n\u001e\u0005\u001e",
    "\u01cf\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0006\u001f\u01d4",
    "\n\u001f\r\u001f\u000e\u001f\u01d5\u0003 \u0003 \u0003 \u0003 \u0005",
    " \u01dc\n \u0003!\u0003!\u0003!\u0005!\u01e1\n!\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003",
    "$\u0005$\u01f0\n$\u0003$\u0005$\u01f3\n$\u0003%\u0003%\u0003%\u0005",
    "%\u01f8\n%\u0003%\u0005%\u01fb\n%\u0003%\u0003%\u0003&\u0003&\u0003",
    "&\u0003\'\u0003\'\u0003\'\u0003(\u0005(\u0206\n(\u0003(\u0003(\u0005",
    "(\u020a\n(\u0003(\u0003(\u0003(\u0005(\u020f\n(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003*\u0005*\u021b\n*\u0003",
    "*\u0003*\u0007*\u021f\n*\f*\u000e*\u0222\u000b*\u0003*\u0003*\u0003",
    "+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0007,\u022d\n,\f,\u000e",
    ",\u0230\u000b,\u0003,\u0003,\u0003,\u0005,\u0235\n,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u023b\n,\u0003-\u0005-\u023e\n-\u0003-\u0005-\u0241",
    "\n-\u0003-\u0003-\u0003-\u0005-\u0246\n-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0005-\u024e\n-\u0003-\u0005-\u0251\n-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u025b\n-\u0003-\u0005",
    "-\u025e\n-\u0003-\u0003-\u0003-\u0005-\u0263\n-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0005-\u026a\n-\u0003.\u0003.\u0003.\u0007.\u026f\n",
    ".\f.\u000e.\u0272\u000b.\u0003.\u0003.\u0005.\u0276\n.\u0005.\u0278",
    "\n.\u0003.\u0005.\u027b\n.\u0003/\u0003/\u0003/\u0005/\u0280\n/\u0003",
    "0\u00030\u00030\u00031\u00051\u0286\n1\u00032\u00062\u0289\n2\r2\u000e",
    "2\u028a\u00033\u00033\u00033\u00033\u00034\u00074\u0292\n4\f4\u000e",
    "4\u0295\u000b4\u00034\u00054\u0298\n4\u00034\u00064\u029b\n4\r4\u000e",
    "4\u029c\u00034\u00074\u02a0\n4\f4\u000e4\u02a3\u000b4\u00034\u00074",
    "\u02a6\n4\f4\u000e4\u02a9\u000b4\u00035\u00055\u02ac\n5\u00035\u0003",
    "5\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00056\u02bb\n6\u00036\u00056\u02be\n6\u00036\u00036\u0003",
    "6\u00056\u02c3\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00056\u02da\n6\u00036\u00056\u02dd\n6\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u02e6\n7\u00038\u0003",
    "8\u00038\u00038\u00078\u02ec\n8\f8\u000e8\u02ef\u000b8\u00038\u0005",
    "8\u02f2\n8\u00058\u02f4\n8\u00038\u00038\u00039\u00059\u02f9\n9\u0003",
    "9\u00039\u00059\u02fd\n9\u0003:\u0003:\u0003:\u0007:\u0302\n:\f:\u000e",
    ":\u0305\u000b:\u0003;\u0003;\u0003;\u0003;\u0005;\u030b\n;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u031b\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u033d\n;\u0003;\u0005",
    ";\u0340\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0005;\u034c\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u038c\n;\u0003;\u0003;\u0005",
    ";\u0390\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0007;\u039d\n;\f;\u000e;\u03a0\u000b;\u0003<\u0003",
    "<\u0003<\u0005<\u03a5\n<\u0003=\u0003=\u0003=\u0003=\u0007=\u03ab\n",
    "=\f=\u000e=\u03ae\u000b=\u0005=\u03b0\n=\u0003=\u0005=\u03b3\n=\u0003",
    "=\u0003=\u0003>\u0003>\u0005>\u03b9\n>\u0003>\u0003>\u0005>\u03bd\n",
    ">\u0003>\u0003>\u0005>\u03c1\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0005>\u03c9\n>\u0003>\u0003>\u0003>\u0003>\u0005>\u03cf\n>\u0003",
    "?\u0003?\u0003?\u0005?\u03d4\n?\u0003?\u0005?\u03d7\n?\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0005@\u03de\n@\u0003A\u0003A\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0005B\u03e9\nB\u0003C\u0003C\u0003D\u0003",
    "D\u0003E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003G\u0003",
    "G\u0005G\u03f9\nG\u0003H\u0003H\u0003I\u0003I\u0003I\u0005I\u0400\n",
    "I\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0005K\u0408\nK\u0003L\u0003",
    "L\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u0411\nM\u0003M\u0007M\u0414",
    "\nM\fM\u000eM\u0417\u000bM\u0003N\u0003N\u0005N\u041b\nN\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0005N\u0422\nN\u0003O\u0005O\u0425\nO\u0003",
    "O\u0003O\u0003O\u0005O\u042a\nO\u0003O\u0005O\u042d\nO\u0003O\u0005",
    "O\u0430\nO\u0003O\u0005O\u0433\nO\u0003P\u0003P\u0003P\u0007P\u0438",
    "\nP\fP\u000eP\u043b\u000bP\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u0441",
    "\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u0447\nQ\u0005Q\u0449\nQ\u0003",
    "R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0007T\u0454",
    "\nT\fT\u000eT\u0457\u000bT\u0003U\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u045e\nU\u0003V\u0003V\u0005V\u0462\nV\u0003V\u0007V\u0465\nV\fV\u000e",
    "V\u0468\u000bV\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0005W\u0473\nW\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0005X\u047e\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0484",
    "\nY\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0007\\\u0490\n\\\f\\\u000e\\\u0493\u000b\\\u0003]\u0003",
    "]\u0003]\u0003]\u0007]\u0499\n]\f]\u000e]\u049c\u000b]\u0005]\u049e",
    "\n]\u0003]\u0005]\u04a1\n]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0002\u0003t_\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u0002\u000e\u0005",
    "\u0002OOddii\u0003\u0002\u001a\u001c\u0003\u0002\u0016\u0017\u0003\u0002",
    " \"\u0003\u0002#&\u0003\u0002\'*\u0003\u00020;\u0003\u0002?C\u0003\u0002",
    "DG\u0005\u0002llzz\u0082\u0082\u0005\u0002Hmxx{\u0081\u0004\u0002\'",
    "\'))\u0002\u052f\u0002\u00bd\u0003\u0002\u0002\u0002\u0004\u00c4\u0003",
    "\u0002\u0002\u0002\u0006\u00da\u0003\u0002\u0002\u0002\b\u00dc\u0003",
    "\u0002\u0002\u0002\n\u00e3\u0003\u0002\u0002\u0002\f\u00e7\u0003\u0002",
    "\u0002\u0002\u000e\u0101\u0003\u0002\u0002\u0002\u0010\u0103\u0003\u0002",
    "\u0002\u0002\u0012\u0114\u0003\u0002\u0002\u0002\u0014\u0118\u0003\u0002",
    "\u0002\u0002\u0016\u011e\u0003\u0002\u0002\u0002\u0018\u0121\u0003\u0002",
    "\u0002\u0002\u001a\u0136\u0003\u0002\u0002\u0002\u001c\u0142\u0003\u0002",
    "\u0002\u0002\u001e\u0147\u0003\u0002\u0002\u0002 \u0149\u0003\u0002",
    "\u0002\u0002\"\u014c\u0003\u0002\u0002\u0002$\u0155\u0003\u0002\u0002",
    "\u0002&\u015a\u0003\u0002\u0002\u0002(\u015c\u0003\u0002\u0002\u0002",
    "*\u0160\u0003\u0002\u0002\u0002,\u01a1\u0003\u0002\u0002\u0002.\u01a3",
    "\u0003\u0002\u0002\u00020\u01a5\u0003\u0002\u0002\u00022\u01ac\u0003",
    "\u0002\u0002\u00024\u01b3\u0003\u0002\u0002\u00026\u01ba\u0003\u0002",
    "\u0002\u00028\u01c0\u0003\u0002\u0002\u0002:\u01c6\u0003\u0002\u0002",
    "\u0002<\u01d3\u0003\u0002\u0002\u0002>\u01d7\u0003\u0002\u0002\u0002",
    "@\u01dd\u0003\u0002\u0002\u0002B\u01e2\u0003\u0002\u0002\u0002D\u01e6",
    "\u0003\u0002\u0002\u0002F\u01eb\u0003\u0002\u0002\u0002H\u01f4\u0003",
    "\u0002\u0002\u0002J\u01fe\u0003\u0002\u0002\u0002L\u0201\u0003\u0002",
    "\u0002\u0002N\u0205\u0003\u0002\u0002\u0002P\u0215\u0003\u0002\u0002",
    "\u0002R\u021a\u0003\u0002\u0002\u0002T\u0225\u0003\u0002\u0002\u0002",
    "V\u023a\u0003\u0002\u0002\u0002X\u0269\u0003\u0002\u0002\u0002Z\u027a",
    "\u0003\u0002\u0002\u0002\\\u027c\u0003\u0002\u0002\u0002^\u0281\u0003",
    "\u0002\u0002\u0002`\u0285\u0003\u0002\u0002\u0002b\u0288\u0003\u0002",
    "\u0002\u0002d\u028c\u0003\u0002\u0002\u0002f\u0293\u0003\u0002\u0002",
    "\u0002h\u02ab\u0003\u0002\u0002\u0002j\u02dc\u0003\u0002\u0002\u0002",
    "l\u02e5\u0003\u0002\u0002\u0002n\u02e7\u0003\u0002\u0002\u0002p\u02f8",
    "\u0003\u0002\u0002\u0002r\u02fe\u0003\u0002\u0002\u0002t\u034b\u0003",
    "\u0002\u0002\u0002v\u03a4\u0003\u0002\u0002\u0002x\u03a6\u0003\u0002",
    "\u0002\u0002z\u03ce\u0003\u0002\u0002\u0002|\u03d6\u0003\u0002\u0002",
    "\u0002~\u03dd\u0003\u0002\u0002\u0002\u0080\u03df\u0003\u0002\u0002",
    "\u0002\u0082\u03e8\u0003\u0002\u0002\u0002\u0084\u03ea\u0003\u0002\u0002",
    "\u0002\u0086\u03ec\u0003\u0002\u0002\u0002\u0088\u03ee\u0003\u0002\u0002",
    "\u0002\u008a\u03f2\u0003\u0002\u0002\u0002\u008c\u03f8\u0003\u0002\u0002",
    "\u0002\u008e\u03fa\u0003\u0002\u0002\u0002\u0090\u03ff\u0003\u0002\u0002",
    "\u0002\u0092\u0401\u0003\u0002\u0002\u0002\u0094\u0407\u0003\u0002\u0002",
    "\u0002\u0096\u0409\u0003\u0002\u0002\u0002\u0098\u0410\u0003\u0002\u0002",
    "\u0002\u009a\u0418\u0003\u0002\u0002\u0002\u009c\u0424\u0003\u0002\u0002",
    "\u0002\u009e\u0434\u0003\u0002\u0002\u0002\u00a0\u0448\u0003\u0002\u0002",
    "\u0002\u00a2\u044a\u0003\u0002\u0002\u0002\u00a4\u044d\u0003\u0002\u0002",
    "\u0002\u00a6\u0450\u0003\u0002\u0002\u0002\u00a8\u045d\u0003\u0002\u0002",
    "\u0002\u00aa\u045f\u0003\u0002\u0002\u0002\u00ac\u0472\u0003\u0002\u0002",
    "\u0002\u00ae\u047d\u0003\u0002\u0002\u0002\u00b0\u0483\u0003\u0002\u0002",
    "\u0002\u00b2\u0485\u0003\u0002\u0002\u0002\u00b4\u0488\u0003\u0002\u0002",
    "\u0002\u00b6\u048b\u0003\u0002\u0002\u0002\u00b8\u0494\u0003\u0002\u0002",
    "\u0002\u00ba\u04a4\u0003\u0002\u0002\u0002\u00bc\u00be\u0007\u0003\u0002",
    "\u0002\u00bd\u00bc\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002\u0002",
    "\u0002\u00be\u00c0\u0003\u0002\u0002\u0002\u00bf\u00c1\u0005b2\u0002",
    "\u00c0\u00bf\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002",
    "\u00c1\u00c2\u0003\u0002\u0002\u0002\u00c2\u00c3\u0007\u0002\u0002\u0003",
    "\u00c3\u0003\u0003\u0002\u0002\u0002\u00c4\u00c5\u0005\u0006\u0004\u0002",
    "\u00c5\u0005\u0003\u0002\u0002\u0002\u00c6\u00db\u0005\b\u0005\u0002",
    "\u00c7\u00db\u0005\u0096L\u0002\u00c8\u00db\u0005 \u0011\u0002\u00c9",
    "\u00db\u0005\f\u0007\u0002\u00ca\u00db\u0005\u001a\u000e\u0002\u00cb",
    "\u00db\u0005&\u0014\u0002\u00cc\u00db\u0005P)\u0002\u00cd\u00db\u0005",
    "N(\u0002\u00ce\u00db\u0005(\u0015\u0002\u00cf\u00db\u0005*\u0016\u0002",
    "\u00d0\u00db\u0005,\u0017\u0002\u00d1\u00db\u00050\u0019\u0002\u00d2",
    "\u00db\u00052\u001a\u0002\u00d3\u00db\u00054\u001b\u0002\u00d4\u00db",
    "\u00056\u001c\u0002\u00d5\u00db\u0005B\"\u0002\u00d6\u00db\u00058\u001d",
    "\u0002\u00d7\u00db\u0005D#\u0002\u00d8\u00db\u0005F$\u0002\u00d9\u00db",
    "\u0005L\'\u0002\u00da\u00c6\u0003\u0002\u0002\u0002\u00da\u00c7\u0003",
    "\u0002\u0002\u0002\u00da\u00c8\u0003\u0002\u0002\u0002\u00da\u00c9\u0003",
    "\u0002\u0002\u0002\u00da\u00ca\u0003\u0002\u0002\u0002\u00da\u00cb\u0003",
    "\u0002\u0002\u0002\u00da\u00cc\u0003\u0002\u0002\u0002\u00da\u00cd\u0003",
    "\u0002\u0002\u0002\u00da\u00ce\u0003\u0002\u0002\u0002\u00da\u00cf\u0003",
    "\u0002\u0002\u0002\u00da\u00d0\u0003\u0002\u0002\u0002\u00da\u00d1\u0003",
    "\u0002\u0002\u0002\u00da\u00d2\u0003\u0002\u0002\u0002\u00da\u00d3\u0003",
    "\u0002\u0002\u0002\u00da\u00d4\u0003\u0002\u0002\u0002\u00da\u00d5\u0003",
    "\u0002\u0002\u0002\u00da\u00d6\u0003\u0002\u0002\u0002\u00da\u00d7\u0003",
    "\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00da\u00d9\u0003",
    "\u0002\u0002\u0002\u00db\u0007\u0003\u0002\u0002\u0002\u00dc\u00de\u0007",
    "\u000b\u0002\u0002\u00dd\u00df\u0005\n\u0006\u0002\u00de\u00dd\u0003",
    "\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e0\u0003",
    "\u0002\u0002\u0002\u00e0\u00e1\u0007\f\u0002\u0002\u00e1\t\u0003\u0002",
    "\u0002\u0002\u00e2\u00e4\u0005\u0006\u0004\u0002\u00e3\u00e2\u0003\u0002",
    "\u0002\u0002\u00e4\u00e5\u0003\u0002\u0002\u0002\u00e5\u00e3\u0003\u0002",
    "\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6\u000b\u0003\u0002",
    "\u0002\u0002\u00e7\u00e8\u0007k\u0002\u0002\u00e8\u00e9\u0005\u000e",
    "\b\u0002\u00e9\r\u0003\u0002\u0002\u0002\u00ea\u00eb\u0007\u0083\u0002",
    "\u0002\u00eb\u0102\u0005\u0094K\u0002\u00ec\u00ed\u0005\u0012\n\u0002",
    "\u00ed\u00f0\u0007\u000e\u0002\u0002\u00ee\u00f1\u0005\u0014\u000b\u0002",
    "\u00ef\u00f1\u0005\u0010\t\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002",
    "\u00f0\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002",
    "\u00f2\u00f3\u0005\u0016\f\u0002\u00f3\u00f4\u0005\u0094K\u0002\u00f4",
    "\u0102\u0003\u0002\u0002\u0002\u00f5\u00f6\u0005\u0012\n\u0002\u00f6",
    "\u00f7\u0007\u000e\u0002\u0002\u00f7\u00f9\u0003\u0002\u0002\u0002\u00f8",
    "\u00f5\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9",
    "\u00fc\u0003\u0002\u0002\u0002\u00fa\u00fd\u0005\u0014\u000b\u0002\u00fb",
    "\u00fd\u0005\u0010\t\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002\u00fc",
    "\u00fb\u0003\u0002\u0002\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe",
    "\u00ff\u0005\u0016\f\u0002\u00ff\u0100\u0005\u0094K\u0002\u0100\u0102",
    "\u0003\u0002\u0002\u0002\u0101\u00ea\u0003\u0002\u0002\u0002\u0101\u00ec",
    "\u0003\u0002\u0002\u0002\u0101\u00f8\u0003\u0002\u0002\u0002\u0102\u000f",
    "\u0003\u0002\u0002\u0002\u0103\u0109\u0007\u000b\u0002\u0002\u0104\u0105",
    "\u0005\u0018\r\u0002\u0105\u0106\u0007\u000e\u0002\u0002\u0106\u0108",
    "\u0003\u0002\u0002\u0002\u0107\u0104\u0003\u0002\u0002\u0002\u0108\u010b",
    "\u0003\u0002\u0002\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u0109\u010a",
    "\u0003\u0002\u0002\u0002\u010a\u0110\u0003\u0002\u0002\u0002\u010b\u0109",
    "\u0003\u0002\u0002\u0002\u010c\u010e\u0005\u0018\r\u0002\u010d\u010f",
    "\u0007\u000e\u0002\u0002\u010e\u010d\u0003\u0002\u0002\u0002\u010e\u010f",
    "\u0003\u0002\u0002\u0002\u010f\u0111\u0003\u0002\u0002\u0002\u0110\u010c",
    "\u0003\u0002\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002\u0111\u0112",
    "\u0003\u0002\u0002\u0002\u0112\u0113\u0007\f\u0002\u0002\u0113\u0011",
    "\u0003\u0002\u0002\u0002\u0114\u0115\u0005\u0018\r\u0002\u0115\u0013",
    "\u0003\u0002\u0002\u0002\u0116\u0119\u0007\u001a\u0002\u0002\u0117\u0119",
    "\u0005\u008cG\u0002\u0118\u0116\u0003\u0002\u0002\u0002\u0118\u0117",
    "\u0003\u0002\u0002\u0002\u0119\u011c\u0003\u0002\u0002\u0002\u011a\u011b",
    "\u0007b\u0002\u0002\u011b\u011d\u0005\u008cG\u0002\u011c\u011a\u0003",
    "\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u0015\u0003",
    "\u0002\u0002\u0002\u011e\u011f\u0007c\u0002\u0002\u011f\u0120\u0007",
    "\u0083\u0002\u0002\u0120\u0017\u0003\u0002\u0002\u0002\u0121\u0124\u0005",
    "\u008cG\u0002\u0122\u0123\u0007b\u0002\u0002\u0123\u0125\u0005\u008c",
    "G\u0002\u0124\u0122\u0003\u0002\u0002\u0002\u0124\u0125\u0003\u0002",
    "\u0002\u0002\u0125\u0019\u0003\u0002\u0002\u0002\u0126\u0129\u0007j",
    "\u0002\u0002\u0127\u012a\u0005\u001c\u000f\u0002\u0128\u012a\u0005\u001e",
    "\u0010\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u0129\u0128\u0003\u0002",
    "\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012c\u0005\u0094",
    "K\u0002\u012c\u0137\u0003\u0002\u0002\u0002\u012d\u012e\u0007j\u0002",
    "\u0002\u012e\u0132\u0007\\\u0002\u0002\u012f\u0133\u0005P)\u0002\u0130",
    "\u0133\u0005N(\u0002\u0131\u0133\u0005t;\u0002\u0132\u012f\u0003\u0002",
    "\u0002\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0132\u0131\u0003\u0002",
    "\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134\u0135\u0005\u0094",
    "K\u0002\u0135\u0137\u0003\u0002\u0002\u0002\u0136\u0126\u0003\u0002",
    "\u0002\u0002\u0136\u012d\u0003\u0002\u0002\u0002\u0137\u001b\u0003\u0002",
    "\u0002\u0002\u0138\u0139\u0005\u0014\u000b\u0002\u0139\u013a\u0005\u0016",
    "\f\u0002\u013a\u013b\u0005\u0094K\u0002\u013b\u0143\u0003\u0002\u0002",
    "\u0002\u013c\u013e\u0005\u0010\t\u0002\u013d\u013f\u0005\u0016\f\u0002",
    "\u013e\u013d\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002",
    "\u013f\u0140\u0003\u0002\u0002\u0002\u0140\u0141\u0005\u0094K\u0002",
    "\u0141\u0143\u0003\u0002\u0002\u0002\u0142\u0138\u0003\u0002\u0002\u0002",
    "\u0142\u013c\u0003\u0002\u0002\u0002\u0143\u001d\u0003\u0002\u0002\u0002",
    "\u0144\u0148\u0005 \u0011\u0002\u0145\u0148\u0005P)\u0002\u0146\u0148",
    "\u0005N(\u0002\u0147\u0144\u0003\u0002\u0002\u0002\u0147\u0145\u0003",
    "\u0002\u0002\u0002\u0147\u0146\u0003\u0002\u0002\u0002\u0148\u001f\u0003",
    "\u0002\u0002\u0002\u0149\u014a\u0005\"\u0012\u0002\u014a\u014b\u0005",
    "\u0094K\u0002\u014b!\u0003\u0002\u0002\u0002\u014c\u014d\u0005.\u0018",
    "\u0002\u014d\u0152\u0005$\u0013\u0002\u014e\u014f\u0007\u000e\u0002",
    "\u0002\u014f\u0151\u0005$\u0013\u0002\u0150\u014e\u0003\u0002\u0002",
    "\u0002\u0151\u0154\u0003\u0002\u0002\u0002\u0152\u0150\u0003\u0002\u0002",
    "\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153#\u0003\u0002\u0002",
    "\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0155\u0158\u0005v<\u0002",
    "\u0156\u0157\u0007\u000f\u0002\u0002\u0157\u0159\u0005t;\u0002\u0158",
    "\u0156\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159",
    "%\u0003\u0002\u0002\u0002\u015a\u015b\u0007\r\u0002\u0002\u015b\'\u0003",
    "\u0002\u0002\u0002\u015c\u015d\u0006\u0015\u0002\u0002\u015d\u015e\u0005",
    "r:\u0002\u015e\u015f\u0005\u0094K\u0002\u015f)\u0003\u0002\u0002\u0002",
    "\u0160\u0161\u0007]\u0002\u0002\u0161\u0162\u0007\t\u0002\u0002\u0162",
    "\u0163\u0005r:\u0002\u0163\u0164\u0007\n\u0002\u0002\u0164\u0167\u0005",
    "\u0006\u0004\u0002\u0165\u0166\u0007M\u0002\u0002\u0166\u0168\u0005",
    "\u0006\u0004\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0167\u0168\u0003",
    "\u0002\u0002\u0002\u0168+\u0003\u0002\u0002\u0002\u0169\u016a\u0007",
    "I\u0002\u0002\u016a\u016b\u0005\u0006\u0004\u0002\u016b\u016c\u0007",
    "W\u0002\u0002\u016c\u016d\u0007\t\u0002\u0002\u016d\u016e\u0005r:\u0002",
    "\u016e\u016f\u0007\n\u0002\u0002\u016f\u0170\u0005\u0094K\u0002\u0170",
    "\u01a2\u0003\u0002\u0002\u0002\u0171\u0172\u0007W\u0002\u0002\u0172",
    "\u0173\u0007\t\u0002\u0002\u0173\u0174\u0005r:\u0002\u0174\u0175\u0007",
    "\n\u0002\u0002\u0175\u0176\u0005\u0006\u0004\u0002\u0176\u01a2\u0003",
    "\u0002\u0002\u0002\u0177\u0178\u0007U\u0002\u0002\u0178\u017b\u0007",
    "\t\u0002\u0002\u0179\u017c\u0005r:\u0002\u017a\u017c\u0005\"\u0012\u0002",
    "\u017b\u0179\u0003\u0002\u0002\u0002\u017b\u017a\u0003\u0002\u0002\u0002",
    "\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002",
    "\u017d\u017f\u0007\r\u0002\u0002\u017e\u0180\u0005r:\u0002\u017f\u017e",
    "\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0181",
    "\u0003\u0002\u0002\u0002\u0181\u0183\u0007\r\u0002\u0002\u0182\u0184",
    "\u0005r:\u0002\u0183\u0182\u0003\u0002\u0002\u0002\u0183\u0184\u0003",
    "\u0002\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002\u0185\u0186\u0007",
    "\n\u0002\u0002\u0186\u01a2\u0005\u0006\u0004\u0002\u0187\u0188\u0007",
    "U\u0002\u0002\u0188\u018b\u0007\t\u0002\u0002\u0189\u018c\u0005t;\u0002",
    "\u018a\u018c\u0005\"\u0012\u0002\u018b\u0189\u0003\u0002\u0002\u0002",
    "\u018b\u018a\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002",
    "\u018d\u018e\u0007`\u0002\u0002\u018e\u018f\u0005r:\u0002\u018f\u0190",
    "\u0007\n\u0002\u0002\u0190\u0191\u0005\u0006\u0004\u0002\u0191\u01a2",
    "\u0003\u0002\u0002\u0002\u0192\u0194\u0007U\u0002\u0002\u0193\u0195",
    "\u0007m\u0002\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0194\u0195",
    "\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0199",
    "\u0007\t\u0002\u0002\u0197\u019a\u0005t;\u0002\u0198\u019a\u0005\"\u0012",
    "\u0002\u0199\u0197\u0003\u0002\u0002\u0002\u0199\u0198\u0003\u0002\u0002",
    "\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u019c\u0005\u008eH",
    "\u0002\u019c\u019d\u0006\u0017\u0003\u0002\u019d\u019e\u0005r:\u0002",
    "\u019e\u019f\u0007\n\u0002\u0002\u019f\u01a0\u0005\u0006\u0004\u0002",
    "\u01a0\u01a2\u0003\u0002\u0002\u0002\u01a1\u0169\u0003\u0002\u0002\u0002",
    "\u01a1\u0171\u0003\u0002\u0002\u0002\u01a1\u0177\u0003\u0002\u0002\u0002",
    "\u01a1\u0187\u0003\u0002\u0002\u0002\u01a1\u0192\u0003\u0002\u0002\u0002",
    "\u01a2-\u0003\u0002\u0002\u0002\u01a3\u01a4\t\u0002\u0002\u0002\u01a4",
    "/\u0003\u0002\u0002\u0002\u01a5\u01a8\u0007T\u0002\u0002\u01a6\u01a7",
    "\u0006\u0019\u0004\u0002\u01a7\u01a9\u0005\u008eH\u0002\u01a8\u01a6",
    "\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01aa",
    "\u0003\u0002\u0002\u0002\u01aa\u01ab\u0005\u0094K\u0002\u01ab1\u0003",
    "\u0002\u0002\u0002\u01ac\u01af\u0007H\u0002\u0002\u01ad\u01ae\u0006",
    "\u001a\u0005\u0002\u01ae\u01b0\u0005\u008eH\u0002\u01af\u01ad\u0003",
    "\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003",
    "\u0002\u0002\u0002\u01b1\u01b2\u0005\u0094K\u0002\u01b23\u0003\u0002",
    "\u0002\u0002\u01b3\u01b6\u0007R\u0002\u0002\u01b4\u01b5\u0006\u001b",
    "\u0006\u0002\u01b5\u01b7\u0005r:\u0002\u01b6\u01b4\u0003\u0002\u0002",
    "\u0002\u01b6\u01b7\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002",
    "\u0002\u01b8\u01b9\u0005\u0094K\u0002\u01b95\u0003\u0002\u0002\u0002",
    "\u01ba\u01bb\u0007[\u0002\u0002\u01bb\u01bc\u0007\t\u0002\u0002\u01bc",
    "\u01bd\u0005r:\u0002\u01bd\u01be\u0007\n\u0002\u0002\u01be\u01bf\u0005",
    "\u0006\u0004\u0002\u01bf7\u0003\u0002\u0002\u0002\u01c0\u01c1\u0007",
    "V\u0002\u0002\u01c1\u01c2\u0007\t\u0002\u0002\u01c2\u01c3\u0005r:\u0002",
    "\u01c3\u01c4\u0007\n\u0002\u0002\u01c4\u01c5\u0005:\u001e\u0002\u01c5",
    "9\u0003\u0002\u0002\u0002\u01c6\u01c8\u0007\u000b\u0002\u0002\u01c7",
    "\u01c9\u0005<\u001f\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002\u01c8",
    "\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ce\u0003\u0002\u0002\u0002\u01ca",
    "\u01cc\u0005@!\u0002\u01cb\u01cd\u0005<\u001f\u0002\u01cc\u01cb\u0003",
    "\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd\u01cf\u0003",
    "\u0002\u0002\u0002\u01ce\u01ca\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003",
    "\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d1\u0007",
    "\f\u0002\u0002\u01d1;\u0003\u0002\u0002\u0002\u01d2\u01d4\u0005> \u0002",
    "\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002",
    "\u01d5\u01d3\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002",
    "\u01d6=\u0003\u0002\u0002\u0002\u01d7\u01d8\u0007L\u0002\u0002\u01d8",
    "\u01d9\u0005r:\u0002\u01d9\u01db\u0007\u0011\u0002\u0002\u01da\u01dc",
    "\u0005\n\u0006\u0002\u01db\u01da\u0003\u0002\u0002\u0002\u01db\u01dc",
    "\u0003\u0002\u0002\u0002\u01dc?\u0003\u0002\u0002\u0002\u01dd\u01de",
    "\u0007\\\u0002\u0002\u01de\u01e0\u0007\u0011\u0002\u0002\u01df\u01e1",
    "\u0005\n\u0006\u0002\u01e0\u01df\u0003\u0002\u0002\u0002\u01e0\u01e1",
    "\u0003\u0002\u0002\u0002\u01e1A\u0003\u0002\u0002\u0002\u01e2\u01e3",
    "\u0005\u008eH\u0002\u01e3\u01e4\u0007\u0011\u0002\u0002\u01e4\u01e5",
    "\u0005\u0006\u0004\u0002\u01e5C\u0003\u0002\u0002\u0002\u01e6\u01e7",
    "\u0007^\u0002\u0002\u01e7\u01e8\u0006#\u0007\u0002\u01e8\u01e9\u0005",
    "r:\u0002\u01e9\u01ea\u0005\u0094K\u0002\u01eaE\u0003\u0002\u0002\u0002",
    "\u01eb\u01ec\u0007a\u0002\u0002\u01ec\u01f2\u0005\b\u0005\u0002\u01ed",
    "\u01ef\u0005H%\u0002\u01ee\u01f0\u0005J&\u0002\u01ef\u01ee\u0003\u0002",
    "\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f0\u01f3\u0003\u0002",
    "\u0002\u0002\u01f1\u01f3\u0005J&\u0002\u01f2\u01ed\u0003\u0002\u0002",
    "\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f3G\u0003\u0002\u0002",
    "\u0002\u01f4\u01fa\u0007P\u0002\u0002\u01f5\u01f7\u0007\t\u0002\u0002",
    "\u01f6\u01f8\u0005v<\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f7",
    "\u01f8\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003\u0002\u0002\u0002\u01f9",
    "\u01fb\u0007\n\u0002\u0002\u01fa\u01f5\u0003\u0002\u0002\u0002\u01fa",
    "\u01fb\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc",
    "\u01fd\u0005\b\u0005\u0002\u01fdI\u0003\u0002\u0002\u0002\u01fe\u01ff",
    "\u0007Q\u0002\u0002\u01ff\u0200\u0005\b\u0005\u0002\u0200K\u0003\u0002",
    "\u0002\u0002\u0201\u0202\u0007X\u0002\u0002\u0202\u0203\u0005\u0094",
    "K\u0002\u0203M\u0003\u0002\u0002\u0002\u0204\u0206\u0007l\u0002\u0002",
    "\u0205\u0204\u0003\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002",
    "\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0209\u0007Y\u0002\u0002",
    "\u0208\u020a\u0007\u001a\u0002\u0002\u0209\u0208\u0003\u0002\u0002\u0002",
    "\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002",
    "\u020b\u020c\u0005\u008eH\u0002\u020c\u020e\u0007\t\u0002\u0002\u020d",
    "\u020f\u0005Z.\u0002\u020e\u020d\u0003\u0002\u0002\u0002\u020e\u020f",
    "\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0211",
    "\u0007\n\u0002\u0002\u0211\u0212\u0007\u000b\u0002\u0002\u0212\u0213",
    "\u0005`1\u0002\u0213\u0214\u0007\f\u0002\u0002\u0214O\u0003\u0002\u0002",
    "\u0002\u0215\u0216\u0007e\u0002\u0002\u0216\u0217\u0005\u008eH\u0002",
    "\u0217\u0218\u0005R*\u0002\u0218Q\u0003\u0002\u0002\u0002\u0219\u021b",
    "\u0005T+\u0002\u021a\u0219\u0003\u0002\u0002\u0002\u021a\u021b\u0003",
    "\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u0220\u0007",
    "\u000b\u0002\u0002\u021d\u021f\u0005V,\u0002\u021e\u021d\u0003\u0002",
    "\u0002\u0002\u021f\u0222\u0003\u0002\u0002\u0002\u0220\u021e\u0003\u0002",
    "\u0002\u0002\u0220\u0221\u0003\u0002\u0002\u0002\u0221\u0223\u0003\u0002",
    "\u0002\u0002\u0222\u0220\u0003\u0002\u0002\u0002\u0223\u0224\u0007\f",
    "\u0002\u0002\u0224S\u0003\u0002\u0002\u0002\u0225\u0226\u0007g\u0002",
    "\u0002\u0226\u0227\u0005t;\u0002\u0227U\u0003\u0002\u0002\u0002\u0228",
    "\u022d\u0007\u0080\u0002\u0002\u0229\u022a\u0006,\b\u0002\u022a\u022d",
    "\u0005\u008eH\u0002\u022b\u022d\u0007l\u0002\u0002\u022c\u0228\u0003",
    "\u0002\u0002\u0002\u022c\u0229\u0003\u0002\u0002\u0002\u022c\u022b\u0003",
    "\u0002\u0002\u0002\u022d\u0230\u0003\u0002\u0002\u0002\u022e\u022c\u0003",
    "\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0231\u0003",
    "\u0002\u0002\u0002\u0230\u022e\u0003\u0002\u0002\u0002\u0231\u023b\u0005",
    "X-\u0002\u0232\u023b\u0005&\u0014\u0002\u0233\u0235\u0007\u001f\u0002",
    "\u0002\u0234\u0233\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002",
    "\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0237\u0005l7\u0002",
    "\u0237\u0238\u0007\u000f\u0002\u0002\u0238\u0239\u0005t;\u0002\u0239",
    "\u023b\u0003\u0002\u0002\u0002\u023a\u022e\u0003\u0002\u0002\u0002\u023a",
    "\u0232\u0003\u0002\u0002\u0002\u023a\u0234\u0003\u0002\u0002\u0002\u023b",
    "W\u0003\u0002\u0002\u0002\u023c\u023e\u0007\u001a\u0002\u0002\u023d",
    "\u023c\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e",
    "\u0240\u0003\u0002\u0002\u0002\u023f\u0241\u0007\u001f\u0002\u0002\u0240",
    "\u023f\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241",
    "\u0242\u0003\u0002\u0002\u0002\u0242\u0243\u0005l7\u0002\u0243\u0245",
    "\u0007\t\u0002\u0002\u0244\u0246\u0005Z.\u0002\u0245\u0244\u0003\u0002",
    "\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002",
    "\u0002\u0002\u0247\u0248\u0007\n\u0002\u0002\u0248\u0249\u0007\u000b",
    "\u0002\u0002\u0249\u024a\u0005`1\u0002\u024a\u024b\u0007\f\u0002\u0002",
    "\u024b\u026a\u0003\u0002\u0002\u0002\u024c\u024e\u0007\u001a\u0002\u0002",
    "\u024d\u024c\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002",
    "\u024e\u0250\u0003\u0002\u0002\u0002\u024f\u0251\u0007\u001f\u0002\u0002",
    "\u0250\u024f\u0003\u0002\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002",
    "\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0253\u0005\u0088E\u0002",
    "\u0253\u0254\u0007\t\u0002\u0002\u0254\u0255\u0007\n\u0002\u0002\u0255",
    "\u0256\u0007\u000b\u0002\u0002\u0256\u0257\u0005`1\u0002\u0257\u0258",
    "\u0007\f\u0002\u0002\u0258\u026a\u0003\u0002\u0002\u0002\u0259\u025b",
    "\u0007\u001a\u0002\u0002\u025a\u0259\u0003\u0002\u0002\u0002\u025a\u025b",
    "\u0003\u0002\u0002\u0002\u025b\u025d\u0003\u0002\u0002\u0002\u025c\u025e",
    "\u0007\u001f\u0002\u0002\u025d\u025c\u0003\u0002\u0002\u0002\u025d\u025e",
    "\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0260",
    "\u0005\u008aF\u0002\u0260\u0262\u0007\t\u0002\u0002\u0261\u0263\u0005",
    "Z.\u0002\u0262\u0261\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002",
    "\u0002\u0002\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0265\u0007\n",
    "\u0002\u0002\u0265\u0266\u0007\u000b\u0002\u0002\u0266\u0267\u0005`",
    "1\u0002\u0267\u0268\u0007\f\u0002\u0002\u0268\u026a\u0003\u0002\u0002",
    "\u0002\u0269\u023d\u0003\u0002\u0002\u0002\u0269\u024d\u0003\u0002\u0002",
    "\u0002\u0269\u025a\u0003\u0002\u0002\u0002\u026aY\u0003\u0002\u0002",
    "\u0002\u026b\u0270\u0005\\/\u0002\u026c\u026d\u0007\u000e\u0002\u0002",
    "\u026d\u026f\u0005\\/\u0002\u026e\u026c\u0003\u0002\u0002\u0002\u026f",
    "\u0272\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0003\u0002\u0002\u0002\u0271\u0277\u0003\u0002\u0002\u0002\u0272",
    "\u0270\u0003\u0002\u0002\u0002\u0273\u0275\u0007\u000e\u0002\u0002\u0274",
    "\u0276\u0005^0\u0002\u0275\u0274\u0003\u0002\u0002\u0002\u0275\u0276",
    "\u0003\u0002\u0002\u0002\u0276\u0278\u0003\u0002\u0002\u0002\u0277\u0273",
    "\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002\u0002\u0278\u027b",
    "\u0003\u0002\u0002\u0002\u0279\u027b\u0005^0\u0002\u027a\u026b\u0003",
    "\u0002\u0002\u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027b[\u0003",
    "\u0002\u0002\u0002\u027c\u027f\u0005v<\u0002\u027d\u027e\u0007\u000f",
    "\u0002\u0002\u027e\u0280\u0005t;\u0002\u027f\u027d\u0003\u0002\u0002",
    "\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280]\u0003\u0002\u0002",
    "\u0002\u0281\u0282\u0007\u0012\u0002\u0002\u0282\u0283\u0005t;\u0002",
    "\u0283_\u0003\u0002\u0002\u0002\u0284\u0286\u0005b2\u0002\u0285\u0284",
    "\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286a",
    "\u0003\u0002\u0002\u0002\u0287\u0289\u0005\u0004\u0003\u0002\u0288\u0287",
    "\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002\u0002\u028a\u0288",
    "\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028bc",
    "\u0003\u0002\u0002\u0002\u028c\u028d\u0007\u0007\u0002\u0002\u028d\u028e",
    "\u0005f4\u0002\u028e\u028f\u0007\b\u0002\u0002\u028fe\u0003\u0002\u0002",
    "\u0002\u0290\u0292\u0007\u000e\u0002\u0002\u0291\u0290\u0003\u0002\u0002",
    "\u0002\u0292\u0295\u0003\u0002\u0002\u0002\u0293\u0291\u0003\u0002\u0002",
    "\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0297\u0003\u0002\u0002",
    "\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0296\u0298\u0005h5\u0002",
    "\u0297\u0296\u0003\u0002\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002",
    "\u0298\u02a1\u0003\u0002\u0002\u0002\u0299\u029b\u0007\u000e\u0002\u0002",
    "\u029a\u0299\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002\u0002\u0002",
    "\u029c\u029a\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002",
    "\u029d\u029e\u0003\u0002\u0002\u0002\u029e\u02a0\u0005h5\u0002\u029f",
    "\u029a\u0003\u0002\u0002\u0002\u02a0\u02a3\u0003\u0002\u0002\u0002\u02a1",
    "\u029f\u0003\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2",
    "\u02a7\u0003\u0002\u0002\u0002\u02a3\u02a1\u0003\u0002\u0002\u0002\u02a4",
    "\u02a6\u0007\u000e\u0002\u0002\u02a5\u02a4\u0003\u0002\u0002\u0002\u02a6",
    "\u02a9\u0003\u0002\u0002\u0002\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a7",
    "\u02a8\u0003\u0002\u0002\u0002\u02a8g\u0003\u0002\u0002\u0002\u02a9",
    "\u02a7\u0003\u0002\u0002\u0002\u02aa\u02ac\u0007\u0012\u0002\u0002\u02ab",
    "\u02aa\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac",
    "\u02ad\u0003\u0002\u0002\u0002\u02ad\u02ae\u0005t;\u0002\u02aei\u0003",
    "\u0002\u0002\u0002\u02af\u02b0\u0005l7\u0002\u02b0\u02b1\u0007\u0011",
    "\u0002\u0002\u02b1\u02b2\u0005t;\u0002\u02b2\u02dd\u0003\u0002\u0002",
    "\u0002\u02b3\u02b4\u0007\u0007\u0002\u0002\u02b4\u02b5\u0005t;\u0002",
    "\u02b5\u02b6\u0007\b\u0002\u0002\u02b6\u02b7\u0007\u0011\u0002\u0002",
    "\u02b7\u02b8\u0005t;\u0002\u02b8\u02dd\u0003\u0002\u0002\u0002\u02b9",
    "\u02bb\u0007l\u0002\u0002\u02ba\u02b9\u0003\u0002\u0002\u0002\u02ba",
    "\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bd\u0003\u0002\u0002\u0002\u02bc",
    "\u02be\u0007\u001a\u0002\u0002\u02bd\u02bc\u0003\u0002\u0002\u0002\u02bd",
    "\u02be\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf",
    "\u02c0\u0005l7\u0002\u02c0\u02c2\u0007\t\u0002\u0002\u02c1\u02c3\u0005",
    "Z.\u0002\u02c2\u02c1\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002",
    "\u0002\u0002\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4\u02c5\u0007\n",
    "\u0002\u0002\u02c5\u02c6\u0007\u000b\u0002\u0002\u02c6\u02c7\u0005`",
    "1\u0002\u02c7\u02c8\u0007\f\u0002\u0002\u02c8\u02dd\u0003\u0002\u0002",
    "\u0002\u02c9\u02ca\u0005\u0088E\u0002\u02ca\u02cb\u0007\t\u0002\u0002",
    "\u02cb\u02cc\u0007\n\u0002\u0002\u02cc\u02cd\u0007\u000b\u0002\u0002",
    "\u02cd\u02ce\u0005`1\u0002\u02ce\u02cf\u0007\f\u0002\u0002\u02cf\u02dd",
    "\u0003\u0002\u0002\u0002\u02d0\u02d1\u0005\u008aF\u0002\u02d1\u02d2",
    "\u0007\t\u0002\u0002\u02d2\u02d3\u0005\\/\u0002\u02d3\u02d4\u0007\n",
    "\u0002\u0002\u02d4\u02d5\u0007\u000b\u0002\u0002\u02d5\u02d6\u0005`",
    "1\u0002\u02d6\u02d7\u0007\f\u0002\u0002\u02d7\u02dd\u0003\u0002\u0002",
    "\u0002\u02d8\u02da\u0007\u0012\u0002\u0002\u02d9\u02d8\u0003\u0002\u0002",
    "\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002",
    "\u0002\u02db\u02dd\u0005t;\u0002\u02dc\u02af\u0003\u0002\u0002\u0002",
    "\u02dc\u02b3\u0003\u0002\u0002\u0002\u02dc\u02ba\u0003\u0002\u0002\u0002",
    "\u02dc\u02c9\u0003\u0002\u0002\u0002\u02dc\u02d0\u0003\u0002\u0002\u0002",
    "\u02dc\u02d9\u0003\u0002\u0002\u0002\u02ddk\u0003\u0002\u0002\u0002",
    "\u02de\u02e6\u0005\u008cG\u0002\u02df\u02e6\u0007\u0083\u0002\u0002",
    "\u02e0\u02e6\u0005\u0084C\u0002\u02e1\u02e2\u0007\u0007\u0002\u0002",
    "\u02e2\u02e3\u0005t;\u0002\u02e3\u02e4\u0007\b\u0002\u0002\u02e4\u02e6",
    "\u0003\u0002\u0002\u0002\u02e5\u02de\u0003\u0002\u0002\u0002\u02e5\u02df",
    "\u0003\u0002\u0002\u0002\u02e5\u02e0\u0003\u0002\u0002\u0002\u02e5\u02e1",
    "\u0003\u0002\u0002\u0002\u02e6m\u0003\u0002\u0002\u0002\u02e7\u02f3",
    "\u0007\t\u0002\u0002\u02e8\u02ed\u0005p9\u0002\u02e9\u02ea\u0007\u000e",
    "\u0002\u0002\u02ea\u02ec\u0005p9\u0002\u02eb\u02e9\u0003\u0002\u0002",
    "\u0002\u02ec\u02ef\u0003\u0002\u0002\u0002\u02ed\u02eb\u0003\u0002\u0002",
    "\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02f1\u0003\u0002\u0002",
    "\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02f0\u02f2\u0007\u000e\u0002",
    "\u0002\u02f1\u02f0\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002",
    "\u0002\u02f2\u02f4\u0003\u0002\u0002\u0002\u02f3\u02e8\u0003\u0002\u0002",
    "\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002",
    "\u0002\u02f5\u02f6\u0007\n\u0002\u0002\u02f6o\u0003\u0002\u0002\u0002",
    "\u02f7\u02f9\u0007\u0012\u0002\u0002\u02f8\u02f7\u0003\u0002\u0002\u0002",
    "\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fc\u0003\u0002\u0002\u0002",
    "\u02fa\u02fd\u0005t;\u0002\u02fb\u02fd\u0005\u008eH\u0002\u02fc\u02fa",
    "\u0003\u0002\u0002\u0002\u02fc\u02fb\u0003\u0002\u0002\u0002\u02fdq",
    "\u0003\u0002\u0002\u0002\u02fe\u0303\u0005t;\u0002\u02ff\u0300\u0007",
    "\u000e\u0002\u0002\u0300\u0302\u0005t;\u0002\u0301\u02ff\u0003\u0002",
    "\u0002\u0002\u0302\u0305\u0003\u0002\u0002\u0002\u0303\u0301\u0003\u0002",
    "\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304s\u0003\u0002",
    "\u0002\u0002\u0305\u0303\u0003\u0002\u0002\u0002\u0306\u0307\b;\u0001",
    "\u0002\u0307\u034c\u0005z>\u0002\u0308\u030a\u0007e\u0002\u0002\u0309",
    "\u030b\u0005\u008eH\u0002\u030a\u0309\u0003\u0002\u0002\u0002\u030a",
    "\u030b\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c",
    "\u034c\u0005R*\u0002\u030d\u030e\u0007N\u0002\u0002\u030e\u030f\u0005",
    "t;\u0002\u030f\u0310\u0007\u0013\u0002\u0002\u0310\u0311\u0005\u008c",
    "G\u0002\u0311\u0312\u0005n8\u0002\u0312\u034c\u0003\u0002\u0002\u0002",
    "\u0313\u0314\u0007N\u0002\u0002\u0314\u0315\u0005t;\u0002\u0315\u0316",
    "\u0005n8\u0002\u0316\u034c\u0003\u0002\u0002\u0002\u0317\u0318\u0007",
    "N\u0002\u0002\u0318\u031a\u0005t;\u0002\u0319\u031b\u0005n8\u0002\u031a",
    "\u0319\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002\u0002\u031b",
    "\u034c\u0003\u0002\u0002\u0002\u031c\u031d\u0007N\u0002\u0002\u031d",
    "\u031e\u0007\u0013\u0002\u0002\u031e\u034c\u0005\u008eH\u0002\u031f",
    "\u0320\u0007_\u0002\u0002\u0320\u034c\u0005t;(\u0321\u0322\u0007S\u0002",
    "\u0002\u0322\u034c\u0005t;\'\u0323\u0324\u0007K\u0002\u0002\u0324\u034c",
    "\u0005t;&\u0325\u0326\u0007\u0014\u0002\u0002\u0326\u034c\u0005t;%\u0327",
    "\u0328\u0007\u0015\u0002\u0002\u0328\u034c\u0005t;$\u0329\u032a\u0007",
    "\u0016\u0002\u0002\u032a\u034c\u0005t;#\u032b\u032c\u0007\u0017\u0002",
    "\u0002\u032c\u034c\u0005t;\"\u032d\u032e\u0007\u0018\u0002\u0002\u032e",
    "\u034c\u0005t;!\u032f\u0330\u0007\u0019\u0002\u0002\u0330\u034c\u0005",
    "t; \u0331\u0332\u0007m\u0002\u0002\u0332\u034c\u0005t;\u001f\u0333\u0334",
    "\u0007k\u0002\u0002\u0334\u0335\u0007\t\u0002\u0002\u0335\u0336\u0005",
    "t;\u0002\u0336\u0337\u0007\n\u0002\u0002\u0337\u034c\u0003\u0002\u0002",
    "\u0002\u0338\u034c\u0007Z\u0002\u0002\u0339\u033f\u0007\u0081\u0002",
    "\u0002\u033a\u033c\u0006;\t\u0002\u033b\u033d\u0007\u001a\u0002\u0002",
    "\u033c\u033b\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002",
    "\u033d\u033e\u0003\u0002\u0002\u0002\u033e\u0340\u0005r:\u0002\u033f",
    "\u033a\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340",
    "\u034c\u0003\u0002\u0002\u0002\u0341\u034c\u0005\u008eH\u0002\u0342",
    "\u034c\u0007h\u0002\u0002\u0343\u034c\u0005\u0082B\u0002\u0344\u034c",
    "\u0005d3\u0002\u0345\u034c\u0005x=\u0002\u0346\u0347\u0007\t\u0002\u0002",
    "\u0347\u0348\u0005r:\u0002\u0348\u0349\u0007\n\u0002\u0002\u0349\u034c",
    "\u0003\u0002\u0002\u0002\u034a\u034c\u0005\u0098M\u0002\u034b\u0306",
    "\u0003\u0002\u0002\u0002\u034b\u0308\u0003\u0002\u0002\u0002\u034b\u030d",
    "\u0003\u0002\u0002\u0002\u034b\u0313\u0003\u0002\u0002\u0002\u034b\u0317",
    "\u0003\u0002\u0002\u0002\u034b\u031c\u0003\u0002\u0002\u0002\u034b\u031f",
    "\u0003\u0002\u0002\u0002\u034b\u0321\u0003\u0002\u0002\u0002\u034b\u0323",
    "\u0003\u0002\u0002\u0002\u034b\u0325\u0003\u0002\u0002\u0002\u034b\u0327",
    "\u0003\u0002\u0002\u0002\u034b\u0329\u0003\u0002\u0002\u0002\u034b\u032b",
    "\u0003\u0002\u0002\u0002\u034b\u032d\u0003\u0002\u0002\u0002\u034b\u032f",
    "\u0003\u0002\u0002\u0002\u034b\u0331\u0003\u0002\u0002\u0002\u034b\u0333",
    "\u0003\u0002\u0002\u0002\u034b\u0338\u0003\u0002\u0002\u0002\u034b\u0339",
    "\u0003\u0002\u0002\u0002\u034b\u0341\u0003\u0002\u0002\u0002\u034b\u0342",
    "\u0003\u0002\u0002\u0002\u034b\u0343\u0003\u0002\u0002\u0002\u034b\u0344",
    "\u0003\u0002\u0002\u0002\u034b\u0345\u0003\u0002\u0002\u0002\u034b\u0346",
    "\u0003\u0002\u0002\u0002\u034b\u034a\u0003\u0002\u0002\u0002\u034c\u039e",
    "\u0003\u0002\u0002\u0002\u034d\u034e\f\u001e\u0002\u0002\u034e\u034f",
    "\u0007\u001d\u0002\u0002\u034f\u039d\u0005t;\u001e\u0350\u0351\f\u001d",
    "\u0002\u0002\u0351\u0352\t\u0003\u0002\u0002\u0352\u039d\u0005t;\u001e",
    "\u0353\u0354\f\u001c\u0002\u0002\u0354\u0355\t\u0004\u0002\u0002\u0355",
    "\u039d\u0005t;\u001d\u0356\u0357\f\u001b\u0002\u0002\u0357\u0358\u0007",
    "\u001e\u0002\u0002\u0358\u039d\u0005t;\u001c\u0359\u035a\f\u001a\u0002",
    "\u0002\u035a\u035b\t\u0005\u0002\u0002\u035b\u039d\u0005t;\u001b\u035c",
    "\u035d\f\u0019\u0002\u0002\u035d\u035e\t\u0006\u0002\u0002\u035e\u039d",
    "\u0005t;\u001a\u035f\u0360\f\u0018\u0002\u0002\u0360\u0361\u0007J\u0002",
    "\u0002\u0361\u039d\u0005t;\u0019\u0362\u0363\f\u0017\u0002\u0002\u0363",
    "\u0364\u0007`\u0002\u0002\u0364\u039d\u0005t;\u0018\u0365\u0366\f\u0016",
    "\u0002\u0002\u0366\u0367\t\u0007\u0002\u0002\u0367\u039d\u0005t;\u0017",
    "\u0368\u0369\f\u0015\u0002\u0002\u0369\u036a\u0007+\u0002\u0002\u036a",
    "\u039d\u0005t;\u0016\u036b\u036c\f\u0014\u0002\u0002\u036c\u036d\u0007",
    ",\u0002\u0002\u036d\u039d\u0005t;\u0015\u036e\u036f\f\u0013\u0002\u0002",
    "\u036f\u0370\u0007-\u0002\u0002\u0370\u039d\u0005t;\u0014\u0371\u0372",
    "\f\u0012\u0002\u0002\u0372\u0373\u0007.\u0002\u0002\u0373\u039d\u0005",
    "t;\u0013\u0374\u0375\f\u0011\u0002\u0002\u0375\u0376\u0007/\u0002\u0002",
    "\u0376\u039d\u0005t;\u0012\u0377\u0378\f\u0010\u0002\u0002\u0378\u0379",
    "\u0007\u0010\u0002\u0002\u0379\u037a\u0005t;\u0002\u037a\u037b\u0007",
    "\u0011\u0002\u0002\u037b\u037c\u0005t;\u0011\u037c\u039d\u0003\u0002",
    "\u0002\u0002\u037d\u037e\f\u000f\u0002\u0002\u037e\u037f\u0007\u000f",
    "\u0002\u0002\u037f\u039d\u0005t;\u000f\u0380\u0381\f\u000e\u0002\u0002",
    "\u0381\u0382\u0005\u0080A\u0002\u0382\u0383\u0005t;\u000e\u0383\u039d",
    "\u0003\u0002\u0002\u0002\u0384\u0385\f1\u0002\u0002\u0385\u0386\u0007",
    "\u0007\u0002\u0002\u0386\u0387\u0005r:\u0002\u0387\u0388\u0007\b\u0002",
    "\u0002\u0388\u039d\u0003\u0002\u0002\u0002\u0389\u038b\f/\u0002\u0002",
    "\u038a\u038c\u0007\u0010\u0002\u0002\u038b\u038a\u0003\u0002\u0002\u0002",
    "\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u038d\u0003\u0002\u0002\u0002",
    "\u038d\u038f\u0007\u0013\u0002\u0002\u038e\u0390\u0007\u001f\u0002\u0002",
    "\u038f\u038e\u0003\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002",
    "\u0390\u0391\u0003\u0002\u0002\u0002\u0391\u039d\u0005\u008cG\u0002",
    "\u0392\u0393\f+\u0002\u0002\u0393\u039d\u0005n8\u0002\u0394\u0395\f",
    "*\u0002\u0002\u0395\u0396\u0006;\u001f\u0002\u0396\u039d\u0007\u0014",
    "\u0002\u0002\u0397\u0398\f)\u0002\u0002\u0398\u0399\u0006;!\u0002\u0399",
    "\u039d\u0007\u0015\u0002\u0002\u039a\u039b\f\f\u0002\u0002\u039b\u039d",
    "\u0007\u0084\u0002\u0002\u039c\u034d\u0003\u0002\u0002\u0002\u039c\u0350",
    "\u0003\u0002\u0002\u0002\u039c\u0353\u0003\u0002\u0002\u0002\u039c\u0356",
    "\u0003\u0002\u0002\u0002\u039c\u0359\u0003\u0002\u0002\u0002\u039c\u035c",
    "\u0003\u0002\u0002\u0002\u039c\u035f\u0003\u0002\u0002\u0002\u039c\u0362",
    "\u0003\u0002\u0002\u0002\u039c\u0365\u0003\u0002\u0002\u0002\u039c\u0368",
    "\u0003\u0002\u0002\u0002\u039c\u036b\u0003\u0002\u0002\u0002\u039c\u036e",
    "\u0003\u0002\u0002\u0002\u039c\u0371\u0003\u0002\u0002\u0002\u039c\u0374",
    "\u0003\u0002\u0002\u0002\u039c\u0377\u0003\u0002\u0002\u0002\u039c\u037d",
    "\u0003\u0002\u0002\u0002\u039c\u0380\u0003\u0002\u0002\u0002\u039c\u0384",
    "\u0003\u0002\u0002\u0002\u039c\u0389\u0003\u0002\u0002\u0002\u039c\u0392",
    "\u0003\u0002\u0002\u0002\u039c\u0394\u0003\u0002\u0002\u0002\u039c\u0397",
    "\u0003\u0002\u0002\u0002\u039c\u039a\u0003\u0002\u0002\u0002\u039d\u03a0",
    "\u0003\u0002\u0002\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039e\u039f",
    "\u0003\u0002\u0002\u0002\u039fu\u0003\u0002\u0002\u0002\u03a0\u039e",
    "\u0003\u0002\u0002\u0002\u03a1\u03a5\u0005\u008eH\u0002\u03a2\u03a5",
    "\u0005d3\u0002\u03a3\u03a5\u0005x=\u0002\u03a4\u03a1\u0003\u0002\u0002",
    "\u0002\u03a4\u03a2\u0003\u0002\u0002\u0002\u03a4\u03a3\u0003\u0002\u0002",
    "\u0002\u03a5w\u0003\u0002\u0002\u0002\u03a6\u03af\u0007\u000b\u0002",
    "\u0002\u03a7\u03ac\u0005j6\u0002\u03a8\u03a9\u0007\u000e\u0002\u0002",
    "\u03a9\u03ab\u0005j6\u0002\u03aa\u03a8\u0003\u0002\u0002\u0002\u03ab",
    "\u03ae\u0003\u0002\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ac",
    "\u03ad\u0003\u0002\u0002\u0002\u03ad\u03b0\u0003\u0002\u0002\u0002\u03ae",
    "\u03ac\u0003\u0002\u0002\u0002\u03af\u03a7\u0003\u0002\u0002\u0002\u03af",
    "\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b2\u0003\u0002\u0002\u0002\u03b1",
    "\u03b3\u0007\u000e\u0002\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002\u03b2",
    "\u03b3\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002\u03b4",
    "\u03b5\u0007\f\u0002\u0002\u03b5y\u0003\u0002\u0002\u0002\u03b6\u03cf",
    "\u0005N(\u0002\u03b7\u03b9\u0007l\u0002\u0002\u03b8\u03b7\u0003\u0002",
    "\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002",
    "\u0002\u0002\u03ba\u03bc\u0007Y\u0002\u0002\u03bb\u03bd\u0007\u001a",
    "\u0002\u0002\u03bc\u03bb\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002",
    "\u0002\u0002\u03bd\u03be\u0003\u0002\u0002\u0002\u03be\u03c0\u0007\t",
    "\u0002\u0002\u03bf\u03c1\u0005Z.\u0002\u03c0\u03bf\u0003\u0002\u0002",
    "\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002",
    "\u0002\u03c2\u03c3\u0007\n\u0002\u0002\u03c3\u03c4\u0007\u000b\u0002",
    "\u0002\u03c4\u03c5\u0005`1\u0002\u03c5\u03c6\u0007\f\u0002\u0002\u03c6",
    "\u03cf\u0003\u0002\u0002\u0002\u03c7\u03c9\u0007l\u0002\u0002\u03c8",
    "\u03c7\u0003\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9",
    "\u03ca\u0003\u0002\u0002\u0002\u03ca\u03cb\u0005|?\u0002\u03cb\u03cc",
    "\u0007<\u0002\u0002\u03cc\u03cd\u0005~@\u0002\u03cd\u03cf\u0003\u0002",
    "\u0002\u0002\u03ce\u03b6\u0003\u0002\u0002\u0002\u03ce\u03b8\u0003\u0002",
    "\u0002\u0002\u03ce\u03c8\u0003\u0002\u0002\u0002\u03cf{\u0003\u0002",
    "\u0002\u0002\u03d0\u03d7\u0005\u008eH\u0002\u03d1\u03d3\u0007\t\u0002",
    "\u0002\u03d2\u03d4\u0005Z.\u0002\u03d3\u03d2\u0003\u0002\u0002\u0002",
    "\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002",
    "\u03d5\u03d7\u0007\n\u0002\u0002\u03d6\u03d0\u0003\u0002\u0002\u0002",
    "\u03d6\u03d1\u0003\u0002\u0002\u0002\u03d7}\u0003\u0002\u0002\u0002",
    "\u03d8\u03d9\u0007\u000b\u0002\u0002\u03d9\u03da\u0005`1\u0002\u03da",
    "\u03db\u0007\f\u0002\u0002\u03db\u03de\u0003\u0002\u0002\u0002\u03dc",
    "\u03de\u0005t;\u0002\u03dd\u03d8\u0003\u0002\u0002\u0002\u03dd\u03dc",
    "\u0003\u0002\u0002\u0002\u03de\u007f\u0003\u0002\u0002\u0002\u03df\u03e0",
    "\t\b\u0002\u0002\u03e0\u0081\u0003\u0002\u0002\u0002\u03e1\u03e9\u0007",
    "=\u0002\u0002\u03e2\u03e9\u0007>\u0002\u0002\u03e3\u03e9\u0007\u0083",
    "\u0002\u0002\u03e4\u03e9\u0007\u0084\u0002\u0002\u03e5\u03e9\u0007\u0006",
    "\u0002\u0002\u03e6\u03e9\u0005\u0084C\u0002\u03e7\u03e9\u0005\u0086",
    "D\u0002\u03e8\u03e1\u0003\u0002\u0002\u0002\u03e8\u03e2\u0003\u0002",
    "\u0002\u0002\u03e8\u03e3\u0003\u0002\u0002\u0002\u03e8\u03e4\u0003\u0002",
    "\u0002\u0002\u03e8\u03e5\u0003\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002",
    "\u0002\u0002\u03e8\u03e7\u0003\u0002\u0002\u0002\u03e9\u0083\u0003\u0002",
    "\u0002\u0002\u03ea\u03eb\t\t\u0002\u0002\u03eb\u0085\u0003\u0002\u0002",
    "\u0002\u03ec\u03ed\t\n\u0002\u0002\u03ed\u0087\u0003\u0002\u0002\u0002",
    "\u03ee\u03ef\u0006E#\u0002\u03ef\u03f0\u0005\u008eH\u0002\u03f0\u03f1",
    "\u0005l7\u0002\u03f1\u0089\u0003\u0002\u0002\u0002\u03f2\u03f3\u0006",
    "F$\u0002\u03f3\u03f4\u0005\u008eH\u0002\u03f4\u03f5\u0005l7\u0002\u03f5",
    "\u008b\u0003\u0002\u0002\u0002\u03f6\u03f9\u0007\u0082\u0002\u0002\u03f7",
    "\u03f9\u0005\u0090I\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8",
    "\u03f7\u0003\u0002\u0002\u0002\u03f9\u008d\u0003\u0002\u0002\u0002\u03fa",
    "\u03fb\t\u000b\u0002\u0002\u03fb\u008f\u0003\u0002\u0002\u0002\u03fc",
    "\u0400\u0005\u0092J\u0002\u03fd\u0400\u0007=\u0002\u0002\u03fe\u0400",
    "\u0007>\u0002\u0002\u03ff\u03fc\u0003\u0002\u0002\u0002\u03ff\u03fd",
    "\u0003\u0002\u0002\u0002\u03ff\u03fe\u0003\u0002\u0002\u0002\u0400\u0091",
    "\u0003\u0002\u0002\u0002\u0401\u0402\t\f\u0002\u0002\u0402\u0093\u0003",
    "\u0002\u0002\u0002\u0403\u0408\u0007\r\u0002\u0002\u0404\u0408\u0007",
    "\u0002\u0002\u0003\u0405\u0408\u0006K%\u0002\u0406\u0408\u0006K&\u0002",
    "\u0407\u0403\u0003\u0002\u0002\u0002\u0407\u0404\u0003\u0002\u0002\u0002",
    "\u0407\u0405\u0003\u0002\u0002\u0002\u0407\u0406\u0003\u0002\u0002\u0002",
    "\u0408\u0095\u0003\u0002\u0002\u0002\u0409\u040a\u0005\u0098M\u0002",
    "\u040a\u0097\u0003\u0002\u0002\u0002\u040b\u0411\u0005\u009cO\u0002",
    "\u040c\u040d\u0007\t\u0002\u0002\u040d\u040e\u0005\u0098M\u0002\u040e",
    "\u040f\u0007\n\u0002\u0002\u040f\u0411\u0003\u0002\u0002\u0002\u0410",
    "\u040b\u0003\u0002\u0002\u0002\u0410\u040c\u0003\u0002\u0002\u0002\u0411",
    "\u0415\u0003\u0002\u0002\u0002\u0412\u0414\u0005\u009aN\u0002\u0413",
    "\u0412\u0003\u0002\u0002\u0002\u0414\u0417\u0003\u0002\u0002\u0002\u0415",
    "\u0413\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416",
    "\u0099\u0003\u0002\u0002\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0418",
    "\u041a\u0007p\u0002\u0002\u0419\u041b\u0007v\u0002\u0002\u041a\u0419",
    "\u0003\u0002\u0002\u0002\u041a\u041b\u0003\u0002\u0002\u0002\u041b\u0421",
    "\u0003\u0002\u0002\u0002\u041c\u0422\u0005\u009cO\u0002\u041d\u041e",
    "\u0007\t\u0002\u0002\u041e\u041f\u0005\u0098M\u0002\u041f\u0420\u0007",
    "\n\u0002\u0002\u0420\u0422\u0003\u0002\u0002\u0002\u0421\u041c\u0003",
    "\u0002\u0002\u0002\u0421\u041d\u0003\u0002\u0002\u0002\u0422\u009b\u0003",
    "\u0002\u0002\u0002\u0423\u0425\u0005\u00b4[\u0002\u0424\u0423\u0003",
    "\u0002\u0002\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0426\u0003",
    "\u0002\u0002\u0002\u0426\u0427\u0007o\u0002\u0002\u0427\u0429\u0005",
    "\u009eP\u0002\u0428\u042a\u0005\u00b6\\\u0002\u0429\u0428\u0003\u0002",
    "\u0002\u0002\u0429\u042a\u0003\u0002\u0002\u0002\u042a\u042c\u0003\u0002",
    "\u0002\u0002\u042b\u042d\u0005\u00a2R\u0002\u042c\u042b\u0003\u0002",
    "\u0002\u0002\u042c\u042d\u0003\u0002\u0002\u0002\u042d\u042f\u0003\u0002",
    "\u0002\u0002\u042e\u0430\u0005\u00a4S\u0002\u042f\u042e\u0003\u0002",
    "\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002\u0430\u0432\u0003\u0002",
    "\u0002\u0002\u0431\u0433\u0005\u00b2Z\u0002\u0432\u0431\u0003\u0002",
    "\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u009d\u0003\u0002",
    "\u0002\u0002\u0434\u0439\u0005\u00a0Q\u0002\u0435\u0436\u0007\u000e",
    "\u0002\u0002\u0436\u0438\u0005\u00a0Q\u0002\u0437\u0435\u0003\u0002",
    "\u0002\u0002\u0438\u043b\u0003\u0002\u0002\u0002\u0439\u0437\u0003\u0002",
    "\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u009f\u0003\u0002",
    "\u0002\u0002\u043b\u0439\u0003\u0002\u0002\u0002\u043c\u0449\u0007\u001a",
    "\u0002\u0002\u043d\u0440\u0005\u008eH\u0002\u043e\u043f\u0007b\u0002",
    "\u0002\u043f\u0441\u0005\u008cG\u0002\u0440\u043e\u0003\u0002\u0002",
    "\u0002\u0440\u0441\u0003\u0002\u0002\u0002\u0441\u0449\u0003\u0002\u0002",
    "\u0002\u0442\u0443\u0005t;\u0002\u0443\u0446\u0005p9\u0002\u0444\u0445",
    "\u0007b\u0002\u0002\u0445\u0447\u0005\u008cG\u0002\u0446\u0444\u0003",
    "\u0002\u0002\u0002\u0446\u0447\u0003\u0002\u0002\u0002\u0447\u0449\u0003",
    "\u0002\u0002\u0002\u0448\u043c\u0003\u0002\u0002\u0002\u0448\u043d\u0003",
    "\u0002\u0002\u0002\u0448\u0442\u0003\u0002\u0002\u0002\u0449\u00a1\u0003",
    "\u0002\u0002\u0002\u044a\u044b\u0007c\u0002\u0002\u044b\u044c\u0005",
    "\u00a6T\u0002\u044c\u00a3\u0003\u0002\u0002\u0002\u044d\u044e\u0007",
    "q\u0002\u0002\u044e\u044f\u0005r:\u0002\u044f\u00a5\u0003\u0002\u0002",
    "\u0002\u0450\u0455\u0005\u00a8U\u0002\u0451\u0452\u0007\u000e\u0002",
    "\u0002\u0452\u0454\u0005\u00a8U\u0002\u0453\u0451\u0003\u0002\u0002",
    "\u0002\u0454\u0457\u0003\u0002\u0002\u0002\u0455\u0453\u0003\u0002\u0002",
    "\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u00a7\u0003\u0002\u0002",
    "\u0002\u0457\u0455\u0003\u0002\u0002\u0002\u0458\u045e\u0005\u00aaV",
    "\u0002\u0459\u045a\u0007\t\u0002\u0002\u045a\u045b\u0005\u00aaV\u0002",
    "\u045b\u045c\u0007\n\u0002\u0002\u045c\u045e\u0003\u0002\u0002\u0002",
    "\u045d\u0458\u0003\u0002\u0002\u0002\u045d\u0459\u0003\u0002\u0002\u0002",
    "\u045e\u00a9\u0003\u0002\u0002\u0002\u045f\u0461\u0005\u00acW\u0002",
    "\u0460\u0462\u0005\u00b0Y\u0002\u0461\u0460\u0003\u0002\u0002\u0002",
    "\u0461\u0462\u0003\u0002\u0002\u0002\u0462\u0466\u0003\u0002\u0002\u0002",
    "\u0463\u0465\u0005\u00aeX\u0002\u0464\u0463\u0003\u0002\u0002\u0002",
    "\u0465\u0468\u0003\u0002\u0002\u0002\u0466\u0464\u0003\u0002\u0002\u0002",
    "\u0466\u0467\u0003\u0002\u0002\u0002\u0467\u00ab\u0003\u0002\u0002\u0002",
    "\u0468\u0466\u0003\u0002\u0002\u0002\u0469\u0473\u0007n\u0002\u0002",
    "\u046a\u046b\u0005t;\u0002\u046b\u046c\u0005n8\u0002\u046c\u0473\u0003",
    "\u0002\u0002\u0002\u046d\u0473\u0005\u008eH\u0002\u046e\u046f\u0007",
    "\t\u0002\u0002\u046f\u0470\u0005\u0098M\u0002\u0470\u0471\u0007\n\u0002",
    "\u0002\u0471\u0473\u0003\u0002\u0002\u0002\u0472\u0469\u0003\u0002\u0002",
    "\u0002\u0472\u046a\u0003\u0002\u0002\u0002\u0472\u046d\u0003\u0002\u0002",
    "\u0002\u0472\u046e\u0003\u0002\u0002\u0002\u0473\u00ad\u0003\u0002\u0002",
    "\u0002\u0474\u0475\u0007r\u0002\u0002\u0475\u047e\u0005\u00a6T\u0002",
    "\u0476\u0477\u0007r\u0002\u0002\u0477\u0478\u0005\u00a6T\u0002\u0478",
    "\u0479\u0007s\u0002\u0002\u0479\u047a\u0005t;\u0002\u047a\u047b\t\r",
    "\u0002\u0002\u047b\u047c\u0005t;\u0002\u047c\u047e\u0003\u0002\u0002",
    "\u0002\u047d\u0474\u0003\u0002\u0002\u0002\u047d\u0476\u0003\u0002\u0002",
    "\u0002\u047e\u00af\u0003\u0002\u0002\u0002\u047f\u0480\u0007u\u0002",
    "\u0002\u0480\u0484\u0005\u00b8]\u0002\u0481\u0482\u0007u\u0002\u0002",
    "\u0482\u0484\u0005t;\u0002\u0483\u047f\u0003\u0002\u0002\u0002\u0483",
    "\u0481\u0003\u0002\u0002\u0002\u0484\u00b1\u0003\u0002\u0002\u0002\u0485",
    "\u0486\u0007t\u0002\u0002\u0486\u0487\u0005t;\u0002\u0487\u00b3\u0003",
    "\u0002\u0002\u0002\u0488\u0489\u0007u\u0002\u0002\u0489\u048a\u0005",
    "t;\u0002\u048a\u00b5\u0003\u0002\u0002\u0002\u048b\u048c\u0007w\u0002",
    "\u0002\u048c\u0491\u0005t;\u0002\u048d\u048e\u0007\u000e\u0002\u0002",
    "\u048e\u0490\u0005t;\u0002\u048f\u048d\u0003\u0002\u0002\u0002\u0490",
    "\u0493\u0003\u0002\u0002\u0002\u0491\u048f\u0003\u0002\u0002\u0002\u0491",
    "\u0492\u0003\u0002\u0002\u0002\u0492\u00b7\u0003\u0002\u0002\u0002\u0493",
    "\u0491\u0003\u0002\u0002\u0002\u0494\u049d\u0007\u000b\u0002\u0002\u0495",
    "\u049a\u0005\u00ba^\u0002\u0496\u0497\u0007\u000e\u0002\u0002\u0497",
    "\u0499\u0005\u00ba^\u0002\u0498\u0496\u0003\u0002\u0002\u0002\u0499",
    "\u049c\u0003\u0002\u0002\u0002\u049a\u0498\u0003\u0002\u0002\u0002\u049a",
    "\u049b\u0003\u0002\u0002\u0002\u049b\u049e\u0003\u0002\u0002\u0002\u049c",
    "\u049a\u0003\u0002\u0002\u0002\u049d\u0495\u0003\u0002\u0002\u0002\u049d",
    "\u049e\u0003\u0002\u0002\u0002\u049e\u04a0\u0003\u0002\u0002\u0002\u049f",
    "\u04a1\u0007\u000e\u0002\u0002\u04a0\u049f\u0003\u0002\u0002\u0002\u04a0",
    "\u04a1\u0003\u0002\u0002\u0002\u04a1\u04a2\u0003\u0002\u0002\u0002\u04a2",
    "\u04a3\u0007\f\u0002\u0002\u04a3\u00b9\u0003\u0002\u0002\u0002\u04a4",
    "\u04a5\u0005l7\u0002\u04a5\u04a6\u0007\u0011\u0002\u0002\u04a6\u04a7",
    "\u0005t;\u0002\u04a7\u00bb\u0003\u0002\u0002\u0002\u008a\u00bd\u00c0",
    "\u00da\u00de\u00e5\u00f0\u00f8\u00fc\u0101\u0109\u010e\u0110\u0118\u011c",
    "\u0124\u0129\u0132\u0136\u013e\u0142\u0147\u0152\u0158\u0167\u017b\u017f",
    "\u0183\u018b\u0194\u0199\u01a1\u01a8\u01af\u01b6\u01c8\u01cc\u01ce\u01d5",
    "\u01db\u01e0\u01ef\u01f2\u01f7\u01fa\u0205\u0209\u020e\u021a\u0220\u022c",
    "\u022e\u0234\u023a\u023d\u0240\u0245\u024d\u0250\u025a\u025d\u0262\u0269",
    "\u0270\u0275\u0277\u027a\u027f\u0285\u028a\u0293\u0297\u029c\u02a1\u02a7",
    "\u02ab\u02ba\u02bd\u02c2\u02d9\u02dc\u02e5\u02ed\u02f1\u02f3\u02f8\u02fc",
    "\u0303\u030a\u031a\u033c\u033f\u034b\u038b\u038f\u039c\u039e\u03a4\u03ac",
    "\u03af\u03b2\u03b8\u03bc\u03c0\u03c8\u03ce\u03d3\u03d6\u03dd\u03e8\u03f8",
    "\u03ff\u0407\u0410\u0415\u041a\u0421\u0424\u0429\u042c\u042f\u0432\u0439",
    "\u0440\u0446\u0448\u0455\u045d\u0461\u0466\u0472\u047d\u0483\u0491\u049a",
    "\u049d\u04a0"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, "'['", "']'", "'('", 
                     "')'", "'{'", "'}'", "';'", "','", "'='", "'?'", "':'", 
                     "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", 
                     "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", 
                     "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", 
                     "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
                     "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
                     "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", 
                     "'**='", "'=>'", "'null'", null, null, null, null, 
                     null, null, null, null, null, null, "'break'", "'do'", 
                     "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", 
                     "'var'", "'catch'", "'finally'", "'return'", "'void'", 
                     "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
                     "'function'", "'this'", "'with'", "'default'", "'if'", 
                     "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", 
                     null, "'class'", "'enum'", "'extends'", "'super'", 
                     "'const'", "'export'", "'import'", "'async'", "'await'", 
                     null, "'select'", "'union'", "'where'", "'join'", "'on'", 
                     "'produce'", "'using'", "'all'", "'within'", "'implements'", 
                     null, null, "'private'", "'public'", "'interface'", 
                     "'package'", "'protected'", "'static'", "'yield'", 
                     null, null, null, null, null, "'\n'" ];

var symbolicNames = [ null, "HashBangLine", "MultiLineComment", "SingleLineComment", 
                      "RegularExpressionLiteral", "OpenBracket", "CloseBracket", 
                      "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
                      "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
                      "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", 
                      "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", 
                      "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                      "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
                      "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                      "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                      "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", 
                      "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                      "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                      "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                      "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                      "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                      "New", "Var", "Catch", "Finally", "Return", "Void", 
                      "Continue", "For", "Switch", "While", "Debugger", 
                      "Function", "This", "With", "Default", "If", "Throw", 
                      "Delete", "In", "Try", "As", "From", "Let", "Class", 
                      "Enum", "Extends", "Super", "Const", "Export", "Import", 
                      "Async", "Await", "Url", "Select", "Union", "Where", 
                      "Join", "On", "Produce", "Using", "All", "Within", 
                      "Implements", "StrictLet", "NonStrictLet", "Private", 
                      "Public", "Interface", "Package", "Protected", "Static", 
                      "Yield", "Identifier", "StringLiteral", "TemplateStringLiteral", 
                      "WhiteSpaces", "LineTerminator", "NEWLINE", "HtmlComment", 
                      "CDataComment", "UnexpectedCharacter" ];

var ruleNames =  [ "program", "sourceElement", "statement", "block", "statementList", 
                   "importStatement", "importFromBlock", "moduleItems", 
                   "importDefault", "importNamespace", "importFrom", "aliasName", 
                   "exportStatement", "exportFromBlock", "declaration", 
                   "variableStatement", "variableDeclarationList", "variableDeclaration", 
                   "emptyStatement", "expressionStatement", "ifStatement", 
                   "iterationStatement", "varModifier", "continueStatement", 
                   "breakStatement", "returnStatement", "withStatement", 
                   "switchStatement", "caseBlock", "caseClauses", "caseClause", 
                   "defaultClause", "labelledStatement", "throwStatement", 
                   "tryStatement", "catchProduction", "finallyProduction", 
                   "debuggerStatement", "functionDeclaration", "classDeclaration", 
                   "classTail", "classHeritage", "classElement", "methodDefinition", 
                   "formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
                   "functionBody", "sourceElements", "arrayLiteral", "elementList", 
                   "arrayElement", "propertyAssignment", "propertyName", 
                   "arguments", "argument", "expressionSequence", "singleExpression", 
                   "assignable", "objectLiteral", "anoymousFunction", "arrowFunctionParameters", 
                   "arrowFunctionBody", "assignmentOperator", "literal", 
                   "numericLiteral", "bigintLiteral", "getter", "setter", 
                   "identifierName", "identifier", "reservedWord", "keyword", 
                   "eos", "querySelectStatement", "queryExpression", "sql_union", 
                   "querySpecification", "select_list", "select_list_elem", 
                   "fromClause", "whereClause", "dataSources", "dataSource", 
                   "data_source_item_joined", "data_source_item", "join_clause", 
                   "using_source_clause", "produce_clause", "bind_clause", 
                   "withinClause", "queryObjectLiteral", "queryPropertyAssignment" ];

function ECMAScriptParser (input) {
	ECMAScriptParserBase.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ECMAScriptParser.prototype = Object.create(ECMAScriptParserBase.prototype);
ECMAScriptParser.prototype.constructor = ECMAScriptParser;

Object.defineProperty(ECMAScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ECMAScriptParser.EOF = antlr4.Token.EOF;
ECMAScriptParser.HashBangLine = 1;
ECMAScriptParser.MultiLineComment = 2;
ECMAScriptParser.SingleLineComment = 3;
ECMAScriptParser.RegularExpressionLiteral = 4;
ECMAScriptParser.OpenBracket = 5;
ECMAScriptParser.CloseBracket = 6;
ECMAScriptParser.OpenParen = 7;
ECMAScriptParser.CloseParen = 8;
ECMAScriptParser.OpenBrace = 9;
ECMAScriptParser.CloseBrace = 10;
ECMAScriptParser.SemiColon = 11;
ECMAScriptParser.Comma = 12;
ECMAScriptParser.Assign = 13;
ECMAScriptParser.QuestionMark = 14;
ECMAScriptParser.Colon = 15;
ECMAScriptParser.Ellipsis = 16;
ECMAScriptParser.Dot = 17;
ECMAScriptParser.PlusPlus = 18;
ECMAScriptParser.MinusMinus = 19;
ECMAScriptParser.Plus = 20;
ECMAScriptParser.Minus = 21;
ECMAScriptParser.BitNot = 22;
ECMAScriptParser.Not = 23;
ECMAScriptParser.Multiply = 24;
ECMAScriptParser.Divide = 25;
ECMAScriptParser.Modulus = 26;
ECMAScriptParser.Power = 27;
ECMAScriptParser.NullCoalesce = 28;
ECMAScriptParser.Hashtag = 29;
ECMAScriptParser.RightShiftArithmetic = 30;
ECMAScriptParser.LeftShiftArithmetic = 31;
ECMAScriptParser.RightShiftLogical = 32;
ECMAScriptParser.LessThan = 33;
ECMAScriptParser.MoreThan = 34;
ECMAScriptParser.LessThanEquals = 35;
ECMAScriptParser.GreaterThanEquals = 36;
ECMAScriptParser.Equals_ = 37;
ECMAScriptParser.NotEquals = 38;
ECMAScriptParser.IdentityEquals = 39;
ECMAScriptParser.IdentityNotEquals = 40;
ECMAScriptParser.BitAnd = 41;
ECMAScriptParser.BitXOr = 42;
ECMAScriptParser.BitOr = 43;
ECMAScriptParser.And = 44;
ECMAScriptParser.Or = 45;
ECMAScriptParser.MultiplyAssign = 46;
ECMAScriptParser.DivideAssign = 47;
ECMAScriptParser.ModulusAssign = 48;
ECMAScriptParser.PlusAssign = 49;
ECMAScriptParser.MinusAssign = 50;
ECMAScriptParser.LeftShiftArithmeticAssign = 51;
ECMAScriptParser.RightShiftArithmeticAssign = 52;
ECMAScriptParser.RightShiftLogicalAssign = 53;
ECMAScriptParser.BitAndAssign = 54;
ECMAScriptParser.BitXorAssign = 55;
ECMAScriptParser.BitOrAssign = 56;
ECMAScriptParser.PowerAssign = 57;
ECMAScriptParser.ARROW = 58;
ECMAScriptParser.NullLiteral = 59;
ECMAScriptParser.BooleanLiteral = 60;
ECMAScriptParser.DecimalLiteral = 61;
ECMAScriptParser.HexIntegerLiteral = 62;
ECMAScriptParser.OctalIntegerLiteral = 63;
ECMAScriptParser.OctalIntegerLiteral2 = 64;
ECMAScriptParser.BinaryIntegerLiteral = 65;
ECMAScriptParser.BigHexIntegerLiteral = 66;
ECMAScriptParser.BigOctalIntegerLiteral = 67;
ECMAScriptParser.BigBinaryIntegerLiteral = 68;
ECMAScriptParser.BigDecimalIntegerLiteral = 69;
ECMAScriptParser.Break = 70;
ECMAScriptParser.Do = 71;
ECMAScriptParser.Instanceof = 72;
ECMAScriptParser.Typeof = 73;
ECMAScriptParser.Case = 74;
ECMAScriptParser.Else = 75;
ECMAScriptParser.New = 76;
ECMAScriptParser.Var = 77;
ECMAScriptParser.Catch = 78;
ECMAScriptParser.Finally = 79;
ECMAScriptParser.Return = 80;
ECMAScriptParser.Void = 81;
ECMAScriptParser.Continue = 82;
ECMAScriptParser.For = 83;
ECMAScriptParser.Switch = 84;
ECMAScriptParser.While = 85;
ECMAScriptParser.Debugger = 86;
ECMAScriptParser.Function = 87;
ECMAScriptParser.This = 88;
ECMAScriptParser.With = 89;
ECMAScriptParser.Default = 90;
ECMAScriptParser.If = 91;
ECMAScriptParser.Throw = 92;
ECMAScriptParser.Delete = 93;
ECMAScriptParser.In = 94;
ECMAScriptParser.Try = 95;
ECMAScriptParser.As = 96;
ECMAScriptParser.From = 97;
ECMAScriptParser.Let = 98;
ECMAScriptParser.Class = 99;
ECMAScriptParser.Enum = 100;
ECMAScriptParser.Extends = 101;
ECMAScriptParser.Super = 102;
ECMAScriptParser.Const = 103;
ECMAScriptParser.Export = 104;
ECMAScriptParser.Import = 105;
ECMAScriptParser.Async = 106;
ECMAScriptParser.Await = 107;
ECMAScriptParser.Url = 108;
ECMAScriptParser.Select = 109;
ECMAScriptParser.Union = 110;
ECMAScriptParser.Where = 111;
ECMAScriptParser.Join = 112;
ECMAScriptParser.On = 113;
ECMAScriptParser.Produce = 114;
ECMAScriptParser.Using = 115;
ECMAScriptParser.All = 116;
ECMAScriptParser.Within = 117;
ECMAScriptParser.Implements = 118;
ECMAScriptParser.StrictLet = 119;
ECMAScriptParser.NonStrictLet = 120;
ECMAScriptParser.Private = 121;
ECMAScriptParser.Public = 122;
ECMAScriptParser.Interface = 123;
ECMAScriptParser.Package = 124;
ECMAScriptParser.Protected = 125;
ECMAScriptParser.Static = 126;
ECMAScriptParser.Yield = 127;
ECMAScriptParser.Identifier = 128;
ECMAScriptParser.StringLiteral = 129;
ECMAScriptParser.TemplateStringLiteral = 130;
ECMAScriptParser.WhiteSpaces = 131;
ECMAScriptParser.LineTerminator = 132;
ECMAScriptParser.NEWLINE = 133;
ECMAScriptParser.HtmlComment = 134;
ECMAScriptParser.CDataComment = 135;
ECMAScriptParser.UnexpectedCharacter = 136;

ECMAScriptParser.RULE_program = 0;
ECMAScriptParser.RULE_sourceElement = 1;
ECMAScriptParser.RULE_statement = 2;
ECMAScriptParser.RULE_block = 3;
ECMAScriptParser.RULE_statementList = 4;
ECMAScriptParser.RULE_importStatement = 5;
ECMAScriptParser.RULE_importFromBlock = 6;
ECMAScriptParser.RULE_moduleItems = 7;
ECMAScriptParser.RULE_importDefault = 8;
ECMAScriptParser.RULE_importNamespace = 9;
ECMAScriptParser.RULE_importFrom = 10;
ECMAScriptParser.RULE_aliasName = 11;
ECMAScriptParser.RULE_exportStatement = 12;
ECMAScriptParser.RULE_exportFromBlock = 13;
ECMAScriptParser.RULE_declaration = 14;
ECMAScriptParser.RULE_variableStatement = 15;
ECMAScriptParser.RULE_variableDeclarationList = 16;
ECMAScriptParser.RULE_variableDeclaration = 17;
ECMAScriptParser.RULE_emptyStatement = 18;
ECMAScriptParser.RULE_expressionStatement = 19;
ECMAScriptParser.RULE_ifStatement = 20;
ECMAScriptParser.RULE_iterationStatement = 21;
ECMAScriptParser.RULE_varModifier = 22;
ECMAScriptParser.RULE_continueStatement = 23;
ECMAScriptParser.RULE_breakStatement = 24;
ECMAScriptParser.RULE_returnStatement = 25;
ECMAScriptParser.RULE_withStatement = 26;
ECMAScriptParser.RULE_switchStatement = 27;
ECMAScriptParser.RULE_caseBlock = 28;
ECMAScriptParser.RULE_caseClauses = 29;
ECMAScriptParser.RULE_caseClause = 30;
ECMAScriptParser.RULE_defaultClause = 31;
ECMAScriptParser.RULE_labelledStatement = 32;
ECMAScriptParser.RULE_throwStatement = 33;
ECMAScriptParser.RULE_tryStatement = 34;
ECMAScriptParser.RULE_catchProduction = 35;
ECMAScriptParser.RULE_finallyProduction = 36;
ECMAScriptParser.RULE_debuggerStatement = 37;
ECMAScriptParser.RULE_functionDeclaration = 38;
ECMAScriptParser.RULE_classDeclaration = 39;
ECMAScriptParser.RULE_classTail = 40;
ECMAScriptParser.RULE_classHeritage = 41;
ECMAScriptParser.RULE_classElement = 42;
ECMAScriptParser.RULE_methodDefinition = 43;
ECMAScriptParser.RULE_formalParameterList = 44;
ECMAScriptParser.RULE_formalParameterArg = 45;
ECMAScriptParser.RULE_lastFormalParameterArg = 46;
ECMAScriptParser.RULE_functionBody = 47;
ECMAScriptParser.RULE_sourceElements = 48;
ECMAScriptParser.RULE_arrayLiteral = 49;
ECMAScriptParser.RULE_elementList = 50;
ECMAScriptParser.RULE_arrayElement = 51;
ECMAScriptParser.RULE_propertyAssignment = 52;
ECMAScriptParser.RULE_propertyName = 53;
ECMAScriptParser.RULE_arguments = 54;
ECMAScriptParser.RULE_argument = 55;
ECMAScriptParser.RULE_expressionSequence = 56;
ECMAScriptParser.RULE_singleExpression = 57;
ECMAScriptParser.RULE_assignable = 58;
ECMAScriptParser.RULE_objectLiteral = 59;
ECMAScriptParser.RULE_anoymousFunction = 60;
ECMAScriptParser.RULE_arrowFunctionParameters = 61;
ECMAScriptParser.RULE_arrowFunctionBody = 62;
ECMAScriptParser.RULE_assignmentOperator = 63;
ECMAScriptParser.RULE_literal = 64;
ECMAScriptParser.RULE_numericLiteral = 65;
ECMAScriptParser.RULE_bigintLiteral = 66;
ECMAScriptParser.RULE_getter = 67;
ECMAScriptParser.RULE_setter = 68;
ECMAScriptParser.RULE_identifierName = 69;
ECMAScriptParser.RULE_identifier = 70;
ECMAScriptParser.RULE_reservedWord = 71;
ECMAScriptParser.RULE_keyword = 72;
ECMAScriptParser.RULE_eos = 73;
ECMAScriptParser.RULE_querySelectStatement = 74;
ECMAScriptParser.RULE_queryExpression = 75;
ECMAScriptParser.RULE_sql_union = 76;
ECMAScriptParser.RULE_querySpecification = 77;
ECMAScriptParser.RULE_select_list = 78;
ECMAScriptParser.RULE_select_list_elem = 79;
ECMAScriptParser.RULE_fromClause = 80;
ECMAScriptParser.RULE_whereClause = 81;
ECMAScriptParser.RULE_dataSources = 82;
ECMAScriptParser.RULE_dataSource = 83;
ECMAScriptParser.RULE_data_source_item_joined = 84;
ECMAScriptParser.RULE_data_source_item = 85;
ECMAScriptParser.RULE_join_clause = 86;
ECMAScriptParser.RULE_using_source_clause = 87;
ECMAScriptParser.RULE_produce_clause = 88;
ECMAScriptParser.RULE_bind_clause = 89;
ECMAScriptParser.RULE_withinClause = 90;
ECMAScriptParser.RULE_queryObjectLiteral = 91;
ECMAScriptParser.RULE_queryPropertyAssignment = 92;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptParser.EOF, 0);
};

ProgramContext.prototype.HashBangLine = function() {
    return this.getToken(ECMAScriptParser.HashBangLine, 0);
};

ProgramContext.prototype.sourceElements = function() {
    return this.getTypedRuleContext(SourceElementsContext,0);
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ProgramContext = ProgramContext;

ECMAScriptParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ECMAScriptParser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 187;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 186;
            this.match(ECMAScriptParser.HashBangLine);

        }
        this.state = 190;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        if(la_===1) {
            this.state = 189;
            this.sourceElements();

        }
        this.state = 192;
        this.match(ECMAScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_sourceElement;
    return this;
}

SourceElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementContext.prototype.constructor = SourceElementContext;

SourceElementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SourceElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitSourceElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.SourceElementContext = SourceElementContext;

ECMAScriptParser.prototype.sourceElement = function() {

    var localctx = new SourceElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ECMAScriptParser.RULE_sourceElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 194;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.querySelectStatement = function() {
    return this.getTypedRuleContext(QuerySelectStatementContext,0);
};

StatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

StatementContext.prototype.importStatement = function() {
    return this.getTypedRuleContext(ImportStatementContext,0);
};

StatementContext.prototype.exportStatement = function() {
    return this.getTypedRuleContext(ExportStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

StatementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StatementContext.prototype.labelledStatement = function() {
    return this.getTypedRuleContext(LabelledStatementContext,0);
};

StatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.debuggerStatement = function() {
    return this.getTypedRuleContext(DebuggerStatementContext,0);
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.StatementContext = StatementContext;

ECMAScriptParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ECMAScriptParser.RULE_statement);
    try {
        this.state = 216;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 196;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 197;
            this.querySelectStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 198;
            this.variableStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 199;
            this.importStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 200;
            this.exportStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 201;
            this.emptyStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 202;
            this.classDeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 203;
            this.functionDeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 204;
            this.expressionStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 205;
            this.ifStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 206;
            this.iterationStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 207;
            this.continueStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 208;
            this.breakStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 209;
            this.returnStatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 210;
            this.withStatement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 211;
            this.labelledStatement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 212;
            this.switchStatement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 213;
            this.throwStatement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 214;
            this.tryStatement();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 215;
            this.debuggerStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.BlockContext = BlockContext;

ECMAScriptParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ECMAScriptParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 220;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        if(la_===1) {
            this.state = 219;
            this.statementList();

        }
        this.state = 222;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitStatementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.StatementListContext = StatementListContext;

ECMAScriptParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ECMAScriptParser.RULE_statementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 224;
        		this.statement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 227; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importStatement;
    return this;
}

ImportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStatementContext.prototype.constructor = ImportStatementContext;

ImportStatementContext.prototype.Import = function() {
    return this.getToken(ECMAScriptParser.Import, 0);
};

ImportStatementContext.prototype.importFromBlock = function() {
    return this.getTypedRuleContext(ImportFromBlockContext,0);
};

ImportStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitImportStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ImportStatementContext = ImportStatementContext;

ECMAScriptParser.prototype.importStatement = function() {

    var localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ECMAScriptParser.RULE_importStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 229;
        this.match(ECMAScriptParser.Import);
        this.state = 230;
        this.importFromBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportFromBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importFromBlock;
    return this;
}

ImportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromBlockContext.prototype.constructor = ImportFromBlockContext;

ImportFromBlockContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

ImportFromBlockContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ImportFromBlockContext.prototype.importDefault = function() {
    return this.getTypedRuleContext(ImportDefaultContext,0);
};

ImportFromBlockContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ImportFromBlockContext.prototype.importFrom = function() {
    return this.getTypedRuleContext(ImportFromContext,0);
};

ImportFromBlockContext.prototype.importNamespace = function() {
    return this.getTypedRuleContext(ImportNamespaceContext,0);
};

ImportFromBlockContext.prototype.moduleItems = function() {
    return this.getTypedRuleContext(ModuleItemsContext,0);
};

ImportFromBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitImportFromBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ImportFromBlockContext = ImportFromBlockContext;

ECMAScriptParser.prototype.importFromBlock = function() {

    var localctx = new ImportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ECMAScriptParser.RULE_importFromBlock);
    try {
        this.state = 255;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 232;
            this.match(ECMAScriptParser.StringLiteral);
            this.state = 233;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 234;
            this.importDefault();
            this.state = 235;
            this.match(ECMAScriptParser.Comma);
            this.state = 238;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ECMAScriptParser.Multiply:
            case ECMAScriptParser.NullLiteral:
            case ECMAScriptParser.BooleanLiteral:
            case ECMAScriptParser.Break:
            case ECMAScriptParser.Do:
            case ECMAScriptParser.Instanceof:
            case ECMAScriptParser.Typeof:
            case ECMAScriptParser.Case:
            case ECMAScriptParser.Else:
            case ECMAScriptParser.New:
            case ECMAScriptParser.Var:
            case ECMAScriptParser.Catch:
            case ECMAScriptParser.Finally:
            case ECMAScriptParser.Return:
            case ECMAScriptParser.Void:
            case ECMAScriptParser.Continue:
            case ECMAScriptParser.For:
            case ECMAScriptParser.Switch:
            case ECMAScriptParser.While:
            case ECMAScriptParser.Debugger:
            case ECMAScriptParser.Function:
            case ECMAScriptParser.This:
            case ECMAScriptParser.With:
            case ECMAScriptParser.Default:
            case ECMAScriptParser.If:
            case ECMAScriptParser.Throw:
            case ECMAScriptParser.Delete:
            case ECMAScriptParser.In:
            case ECMAScriptParser.Try:
            case ECMAScriptParser.As:
            case ECMAScriptParser.From:
            case ECMAScriptParser.Let:
            case ECMAScriptParser.Class:
            case ECMAScriptParser.Enum:
            case ECMAScriptParser.Extends:
            case ECMAScriptParser.Super:
            case ECMAScriptParser.Const:
            case ECMAScriptParser.Export:
            case ECMAScriptParser.Import:
            case ECMAScriptParser.Async:
            case ECMAScriptParser.Await:
            case ECMAScriptParser.Implements:
            case ECMAScriptParser.Private:
            case ECMAScriptParser.Public:
            case ECMAScriptParser.Interface:
            case ECMAScriptParser.Package:
            case ECMAScriptParser.Protected:
            case ECMAScriptParser.Static:
            case ECMAScriptParser.Yield:
            case ECMAScriptParser.Identifier:
                this.state = 236;
                this.importNamespace();
                break;
            case ECMAScriptParser.OpenBrace:
                this.state = 237;
                this.moduleItems();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 240;
            this.importFrom();
            this.state = 241;
            this.eos();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 246;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            if(la_===1) {
                this.state = 243;
                this.importDefault();
                this.state = 244;
                this.match(ECMAScriptParser.Comma);

            }
            this.state = 250;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ECMAScriptParser.Multiply:
            case ECMAScriptParser.NullLiteral:
            case ECMAScriptParser.BooleanLiteral:
            case ECMAScriptParser.Break:
            case ECMAScriptParser.Do:
            case ECMAScriptParser.Instanceof:
            case ECMAScriptParser.Typeof:
            case ECMAScriptParser.Case:
            case ECMAScriptParser.Else:
            case ECMAScriptParser.New:
            case ECMAScriptParser.Var:
            case ECMAScriptParser.Catch:
            case ECMAScriptParser.Finally:
            case ECMAScriptParser.Return:
            case ECMAScriptParser.Void:
            case ECMAScriptParser.Continue:
            case ECMAScriptParser.For:
            case ECMAScriptParser.Switch:
            case ECMAScriptParser.While:
            case ECMAScriptParser.Debugger:
            case ECMAScriptParser.Function:
            case ECMAScriptParser.This:
            case ECMAScriptParser.With:
            case ECMAScriptParser.Default:
            case ECMAScriptParser.If:
            case ECMAScriptParser.Throw:
            case ECMAScriptParser.Delete:
            case ECMAScriptParser.In:
            case ECMAScriptParser.Try:
            case ECMAScriptParser.As:
            case ECMAScriptParser.From:
            case ECMAScriptParser.Let:
            case ECMAScriptParser.Class:
            case ECMAScriptParser.Enum:
            case ECMAScriptParser.Extends:
            case ECMAScriptParser.Super:
            case ECMAScriptParser.Const:
            case ECMAScriptParser.Export:
            case ECMAScriptParser.Import:
            case ECMAScriptParser.Async:
            case ECMAScriptParser.Await:
            case ECMAScriptParser.Implements:
            case ECMAScriptParser.Private:
            case ECMAScriptParser.Public:
            case ECMAScriptParser.Interface:
            case ECMAScriptParser.Package:
            case ECMAScriptParser.Protected:
            case ECMAScriptParser.Static:
            case ECMAScriptParser.Yield:
            case ECMAScriptParser.Identifier:
                this.state = 248;
                this.importNamespace();
                break;
            case ECMAScriptParser.OpenBrace:
                this.state = 249;
                this.moduleItems();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 252;
            this.importFrom();
            this.state = 253;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleItems;
    return this;
}

ModuleItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemsContext.prototype.constructor = ModuleItemsContext;

ModuleItemsContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ModuleItemsContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ModuleItemsContext.prototype.aliasName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AliasNameContext);
    } else {
        return this.getTypedRuleContext(AliasNameContext,i);
    }
};

ModuleItemsContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ModuleItemsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitModuleItems(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ModuleItemsContext = ModuleItemsContext;

ECMAScriptParser.prototype.moduleItems = function() {

    var localctx = new ModuleItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ECMAScriptParser.RULE_moduleItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 257;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 263;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 258;
                this.aliasName();
                this.state = 259;
                this.match(ECMAScriptParser.Comma); 
            }
            this.state = 265;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

        this.state = 270;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ECMAScriptParser.NullLiteral - 59)) | (1 << (ECMAScriptParser.BooleanLiteral - 59)) | (1 << (ECMAScriptParser.Break - 59)) | (1 << (ECMAScriptParser.Do - 59)) | (1 << (ECMAScriptParser.Instanceof - 59)) | (1 << (ECMAScriptParser.Typeof - 59)) | (1 << (ECMAScriptParser.Case - 59)) | (1 << (ECMAScriptParser.Else - 59)) | (1 << (ECMAScriptParser.New - 59)) | (1 << (ECMAScriptParser.Var - 59)) | (1 << (ECMAScriptParser.Catch - 59)) | (1 << (ECMAScriptParser.Finally - 59)) | (1 << (ECMAScriptParser.Return - 59)) | (1 << (ECMAScriptParser.Void - 59)) | (1 << (ECMAScriptParser.Continue - 59)) | (1 << (ECMAScriptParser.For - 59)) | (1 << (ECMAScriptParser.Switch - 59)) | (1 << (ECMAScriptParser.While - 59)) | (1 << (ECMAScriptParser.Debugger - 59)) | (1 << (ECMAScriptParser.Function - 59)) | (1 << (ECMAScriptParser.This - 59)) | (1 << (ECMAScriptParser.With - 59)) | (1 << (ECMAScriptParser.Default - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ECMAScriptParser.If - 91)) | (1 << (ECMAScriptParser.Throw - 91)) | (1 << (ECMAScriptParser.Delete - 91)) | (1 << (ECMAScriptParser.In - 91)) | (1 << (ECMAScriptParser.Try - 91)) | (1 << (ECMAScriptParser.As - 91)) | (1 << (ECMAScriptParser.From - 91)) | (1 << (ECMAScriptParser.Let - 91)) | (1 << (ECMAScriptParser.Class - 91)) | (1 << (ECMAScriptParser.Enum - 91)) | (1 << (ECMAScriptParser.Extends - 91)) | (1 << (ECMAScriptParser.Super - 91)) | (1 << (ECMAScriptParser.Const - 91)) | (1 << (ECMAScriptParser.Export - 91)) | (1 << (ECMAScriptParser.Import - 91)) | (1 << (ECMAScriptParser.Async - 91)) | (1 << (ECMAScriptParser.Await - 91)) | (1 << (ECMAScriptParser.Implements - 91)) | (1 << (ECMAScriptParser.Private - 91)) | (1 << (ECMAScriptParser.Public - 91)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (ECMAScriptParser.Interface - 123)) | (1 << (ECMAScriptParser.Package - 123)) | (1 << (ECMAScriptParser.Protected - 123)) | (1 << (ECMAScriptParser.Static - 123)) | (1 << (ECMAScriptParser.Yield - 123)) | (1 << (ECMAScriptParser.Identifier - 123)))) !== 0)) {
            this.state = 266;
            this.aliasName();
            this.state = 268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 267;
                this.match(ECMAScriptParser.Comma);
            }

        }

        this.state = 272;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importDefault;
    return this;
}

ImportDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDefaultContext.prototype.constructor = ImportDefaultContext;

ImportDefaultContext.prototype.aliasName = function() {
    return this.getTypedRuleContext(AliasNameContext,0);
};

ImportDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitImportDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ImportDefaultContext = ImportDefaultContext;

ECMAScriptParser.prototype.importDefault = function() {

    var localctx = new ImportDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ECMAScriptParser.RULE_importDefault);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 274;
        this.aliasName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportNamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importNamespace;
    return this;
}

ImportNamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportNamespaceContext.prototype.constructor = ImportNamespaceContext;

ImportNamespaceContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

ImportNamespaceContext.prototype.identifierName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
        return this.getTypedRuleContext(IdentifierNameContext,i);
    }
};

ImportNamespaceContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

ImportNamespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitImportNamespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ImportNamespaceContext = ImportNamespaceContext;

ECMAScriptParser.prototype.importNamespace = function() {

    var localctx = new ImportNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ECMAScriptParser.RULE_importNamespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Multiply:
            this.state = 276;
            this.match(ECMAScriptParser.Multiply);
            break;
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.While:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.This:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.As:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Enum:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Implements:
        case ECMAScriptParser.Private:
        case ECMAScriptParser.Public:
        case ECMAScriptParser.Interface:
        case ECMAScriptParser.Package:
        case ECMAScriptParser.Protected:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.Identifier:
            this.state = 277;
            this.identifierName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.As) {
            this.state = 280;
            this.match(ECMAScriptParser.As);
            this.state = 281;
            this.identifierName();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportFromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importFrom;
    return this;
}

ImportFromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromContext.prototype.constructor = ImportFromContext;

ImportFromContext.prototype.From = function() {
    return this.getToken(ECMAScriptParser.From, 0);
};

ImportFromContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

ImportFromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitImportFrom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ImportFromContext = ImportFromContext;

ECMAScriptParser.prototype.importFrom = function() {

    var localctx = new ImportFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ECMAScriptParser.RULE_importFrom);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(ECMAScriptParser.From);
        this.state = 285;
        this.match(ECMAScriptParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_aliasName;
    return this;
}

AliasNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasNameContext.prototype.constructor = AliasNameContext;

AliasNameContext.prototype.identifierName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
        return this.getTypedRuleContext(IdentifierNameContext,i);
    }
};

AliasNameContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

AliasNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAliasName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.AliasNameContext = AliasNameContext;

ECMAScriptParser.prototype.aliasName = function() {

    var localctx = new AliasNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ECMAScriptParser.RULE_aliasName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.identifierName();
        this.state = 290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.As) {
            this.state = 288;
            this.match(ECMAScriptParser.As);
            this.state = 289;
            this.identifierName();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExportStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportStatement;
    return this;
}

ExportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportStatementContext.prototype.constructor = ExportStatementContext;


 
ExportStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExportDefaultDeclarationContext(parser, ctx) {
	ExportStatementContext.call(this, parser);
    ExportStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExportDefaultDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDefaultDeclarationContext.prototype.constructor = ExportDefaultDeclarationContext;

ECMAScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

ExportDefaultDeclarationContext.prototype.Export = function() {
    return this.getToken(ECMAScriptParser.Export, 0);
};

ExportDefaultDeclarationContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

ExportDefaultDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportDefaultDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

ExportDefaultDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

ExportDefaultDeclarationContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
ExportDefaultDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitExportDefaultDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExportDeclarationContext(parser, ctx) {
	ExportStatementContext.call(this, parser);
    ExportStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExportDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDeclarationContext.prototype.constructor = ExportDeclarationContext;

ECMAScriptParser.ExportDeclarationContext = ExportDeclarationContext;

ExportDeclarationContext.prototype.Export = function() {
    return this.getToken(ECMAScriptParser.Export, 0);
};

ExportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportDeclarationContext.prototype.exportFromBlock = function() {
    return this.getTypedRuleContext(ExportFromBlockContext,0);
};

ExportDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};
ExportDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitExportDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.ExportStatementContext = ExportStatementContext;

ECMAScriptParser.prototype.exportStatement = function() {

    var localctx = new ExportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ECMAScriptParser.RULE_exportStatement);
    try {
        this.state = 308;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExportDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 292;
            this.match(ECMAScriptParser.Export);
            this.state = 295;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            switch(la_) {
            case 1:
                this.state = 293;
                this.exportFromBlock();
                break;

            case 2:
                this.state = 294;
                this.declaration();
                break;

            }
            this.state = 297;
            this.eos();
            break;

        case 2:
            localctx = new ExportDefaultDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 299;
            this.match(ECMAScriptParser.Export);
            this.state = 300;
            this.match(ECMAScriptParser.Default);
            this.state = 304;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            switch(la_) {
            case 1:
                this.state = 301;
                this.classDeclaration();
                break;

            case 2:
                this.state = 302;
                this.functionDeclaration();
                break;

            case 3:
                this.state = 303;
                this.singleExpression(0);
                break;

            }
            this.state = 306;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExportFromBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportFromBlock;
    return this;
}

ExportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportFromBlockContext.prototype.constructor = ExportFromBlockContext;

ExportFromBlockContext.prototype.importNamespace = function() {
    return this.getTypedRuleContext(ImportNamespaceContext,0);
};

ExportFromBlockContext.prototype.importFrom = function() {
    return this.getTypedRuleContext(ImportFromContext,0);
};

ExportFromBlockContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportFromBlockContext.prototype.moduleItems = function() {
    return this.getTypedRuleContext(ModuleItemsContext,0);
};

ExportFromBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitExportFromBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ExportFromBlockContext = ExportFromBlockContext;

ECMAScriptParser.prototype.exportFromBlock = function() {

    var localctx = new ExportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ECMAScriptParser.RULE_exportFromBlock);
    try {
        this.state = 320;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Multiply:
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.While:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.This:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.As:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Enum:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Implements:
        case ECMAScriptParser.Private:
        case ECMAScriptParser.Public:
        case ECMAScriptParser.Interface:
        case ECMAScriptParser.Package:
        case ECMAScriptParser.Protected:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 310;
            this.importNamespace();
            this.state = 311;
            this.importFrom();
            this.state = 312;
            this.eos();
            break;
        case ECMAScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 314;
            this.moduleItems();
            this.state = 316;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
            if(la_===1) {
                this.state = 315;
                this.importFrom();

            }
            this.state = 318;
            this.eos();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

DeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

DeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

DeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.DeclarationContext = DeclarationContext;

ECMAScriptParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ECMAScriptParser.RULE_declaration);
    try {
        this.state = 325;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Const:
            this.enterOuterAlt(localctx, 1);
            this.state = 322;
            this.variableStatement();
            break;
        case ECMAScriptParser.Class:
            this.enterOuterAlt(localctx, 2);
            this.state = 323;
            this.classDeclaration();
            break;
        case ECMAScriptParser.Function:
        case ECMAScriptParser.Async:
            this.enterOuterAlt(localctx, 3);
            this.state = 324;
            this.functionDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableStatement;
    return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

VariableStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

VariableStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitVariableStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.VariableStatementContext = VariableStatementContext;

ECMAScriptParser.prototype.variableStatement = function() {

    var localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ECMAScriptParser.RULE_variableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.variableDeclarationList();
        this.state = 328;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.varModifier = function() {
    return this.getTypedRuleContext(VarModifierContext,0);
};

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


VariableDeclarationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitVariableDeclarationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;

ECMAScriptParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ECMAScriptParser.RULE_variableDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        this.varModifier();
        this.state = 331;
        this.variableDeclaration();
        this.state = 336;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 332;
                this.match(ECMAScriptParser.Comma);
                this.state = 333;
                this.variableDeclaration(); 
            }
            this.state = 338;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.assignable = function() {
    return this.getTypedRuleContext(AssignableContext,0);
};

VariableDeclarationContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};

VariableDeclarationContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

VariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.VariableDeclarationContext = VariableDeclarationContext;

ECMAScriptParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ECMAScriptParser.RULE_variableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.assignable();
        this.state = 342;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 340;
            this.match(ECMAScriptParser.Assign);
            this.state = 341;
            this.singleExpression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.EmptyStatementContext = EmptyStatementContext;

ECMAScriptParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ECMAScriptParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.match(ECMAScriptParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ExpressionStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExpressionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitExpressionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ExpressionStatementContext = ExpressionStatementContext;

ECMAScriptParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ECMAScriptParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        if (!( this.notOpenBraceAndNotFunction())) {
            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
        }
        this.state = 347;
        this.expressionSequence();
        this.state = 348;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(ECMAScriptParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

IfStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

IfStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(ECMAScriptParser.Else, 0);
};

IfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitIfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.IfStatementContext = IfStatementContext;

ECMAScriptParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ECMAScriptParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        this.match(ECMAScriptParser.If);
        this.state = 351;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 352;
        this.expressionSequence();
        this.state = 353;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 354;
        this.statement();
        this.state = 357;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        if(la_===1) {
            this.state = 355;
            this.match(ECMAScriptParser.Else);
            this.state = 356;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;


 
IterationStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DoStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoStatementContext.prototype = Object.create(IterationStatementContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

ECMAScriptParser.DoStatementContext = DoStatementContext;

DoStatementContext.prototype.Do = function() {
    return this.getToken(ECMAScriptParser.Do, 0);
};

DoStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoStatementContext.prototype.While = function() {
    return this.getToken(ECMAScriptParser.While, 0);
};

DoStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

DoStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

DoStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

DoStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};
DoStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitDoStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function WhileStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(IterationStatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

ECMAScriptParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.While = function() {
    return this.getToken(ECMAScriptParser.While, 0);
};

WhileStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

WhileStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

WhileStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ECMAScriptParser.ForStatementContext = ForStatementContext;

ForStatementContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

ForStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ForStatementContext.prototype.SemiColon = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.SemiColon);
    } else {
        return this.getToken(ECMAScriptParser.SemiColon, i);
    }
};


ForStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.expressionSequence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionSequenceContext);
    } else {
        return this.getTypedRuleContext(ExpressionSequenceContext,i);
    }
};

ForStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};
ForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForInStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForInStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForInStatementContext.prototype.constructor = ForInStatementContext;

ECMAScriptParser.ForInStatementContext = ForInStatementContext;

ForInStatementContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

ForInStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ForInStatementContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};

ForInStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ForInStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ForInStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForInStatementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ForInStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};
ForInStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitForInStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForOfStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForOfStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForOfStatementContext.prototype.constructor = ForOfStatementContext;

ECMAScriptParser.ForOfStatementContext = ForOfStatementContext;

ForOfStatementContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

ForOfStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ForOfStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForOfStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ForOfStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ForOfStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForOfStatementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ForOfStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

ForOfStatementContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};
ForOfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitForOfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.IterationStatementContext = IterationStatementContext;

ECMAScriptParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ECMAScriptParser.RULE_iterationStatement);
    var _la = 0; // Token type
    try {
        this.state = 415;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DoStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 359;
            this.match(ECMAScriptParser.Do);
            this.state = 360;
            this.statement();
            this.state = 361;
            this.match(ECMAScriptParser.While);
            this.state = 362;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 363;
            this.expressionSequence();
            this.state = 364;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 365;
            this.eos();
            break;

        case 2:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 367;
            this.match(ECMAScriptParser.While);
            this.state = 368;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 369;
            this.expressionSequence();
            this.state = 370;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 371;
            this.statement();
            break;

        case 3:
            localctx = new ForStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 373;
            this.match(ECMAScriptParser.For);
            this.state = 374;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 377;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ECMAScriptParser.RegularExpressionLiteral:
            case ECMAScriptParser.OpenBracket:
            case ECMAScriptParser.OpenParen:
            case ECMAScriptParser.OpenBrace:
            case ECMAScriptParser.PlusPlus:
            case ECMAScriptParser.MinusMinus:
            case ECMAScriptParser.Plus:
            case ECMAScriptParser.Minus:
            case ECMAScriptParser.BitNot:
            case ECMAScriptParser.Not:
            case ECMAScriptParser.NullLiteral:
            case ECMAScriptParser.BooleanLiteral:
            case ECMAScriptParser.DecimalLiteral:
            case ECMAScriptParser.HexIntegerLiteral:
            case ECMAScriptParser.OctalIntegerLiteral:
            case ECMAScriptParser.OctalIntegerLiteral2:
            case ECMAScriptParser.BinaryIntegerLiteral:
            case ECMAScriptParser.BigHexIntegerLiteral:
            case ECMAScriptParser.BigOctalIntegerLiteral:
            case ECMAScriptParser.BigBinaryIntegerLiteral:
            case ECMAScriptParser.BigDecimalIntegerLiteral:
            case ECMAScriptParser.Typeof:
            case ECMAScriptParser.New:
            case ECMAScriptParser.Void:
            case ECMAScriptParser.Function:
            case ECMAScriptParser.This:
            case ECMAScriptParser.Delete:
            case ECMAScriptParser.Class:
            case ECMAScriptParser.Super:
            case ECMAScriptParser.Import:
            case ECMAScriptParser.Async:
            case ECMAScriptParser.Await:
            case ECMAScriptParser.Select:
            case ECMAScriptParser.Using:
            case ECMAScriptParser.NonStrictLet:
            case ECMAScriptParser.Yield:
            case ECMAScriptParser.Identifier:
            case ECMAScriptParser.StringLiteral:
            case ECMAScriptParser.TemplateStringLiteral:
            	this.state = 375;
            	this.expressionSequence();
            	break;
            case ECMAScriptParser.Var:
            case ECMAScriptParser.Let:
            case ECMAScriptParser.Const:
            	this.state = 376;
            	this.variableDeclarationList();
            	break;
            case ECMAScriptParser.SemiColon:
            	break;
            default:
            	break;
            }
            this.state = 379;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ECMAScriptParser.NullLiteral - 59)) | (1 << (ECMAScriptParser.BooleanLiteral - 59)) | (1 << (ECMAScriptParser.DecimalLiteral - 59)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (ECMAScriptParser.BinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigHexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.Typeof - 59)) | (1 << (ECMAScriptParser.New - 59)) | (1 << (ECMAScriptParser.Void - 59)) | (1 << (ECMAScriptParser.Function - 59)) | (1 << (ECMAScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (ECMAScriptParser.Delete - 93)) | (1 << (ECMAScriptParser.Class - 93)) | (1 << (ECMAScriptParser.Super - 93)) | (1 << (ECMAScriptParser.Import - 93)) | (1 << (ECMAScriptParser.Async - 93)) | (1 << (ECMAScriptParser.Await - 93)) | (1 << (ECMAScriptParser.Select - 93)) | (1 << (ECMAScriptParser.Using - 93)) | (1 << (ECMAScriptParser.NonStrictLet - 93)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (ECMAScriptParser.Yield - 127)) | (1 << (ECMAScriptParser.Identifier - 127)) | (1 << (ECMAScriptParser.StringLiteral - 127)) | (1 << (ECMAScriptParser.TemplateStringLiteral - 127)))) !== 0)) {
                this.state = 380;
                this.expressionSequence();
            }

            this.state = 383;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ECMAScriptParser.NullLiteral - 59)) | (1 << (ECMAScriptParser.BooleanLiteral - 59)) | (1 << (ECMAScriptParser.DecimalLiteral - 59)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (ECMAScriptParser.BinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigHexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.Typeof - 59)) | (1 << (ECMAScriptParser.New - 59)) | (1 << (ECMAScriptParser.Void - 59)) | (1 << (ECMAScriptParser.Function - 59)) | (1 << (ECMAScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (ECMAScriptParser.Delete - 93)) | (1 << (ECMAScriptParser.Class - 93)) | (1 << (ECMAScriptParser.Super - 93)) | (1 << (ECMAScriptParser.Import - 93)) | (1 << (ECMAScriptParser.Async - 93)) | (1 << (ECMAScriptParser.Await - 93)) | (1 << (ECMAScriptParser.Select - 93)) | (1 << (ECMAScriptParser.Using - 93)) | (1 << (ECMAScriptParser.NonStrictLet - 93)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (ECMAScriptParser.Yield - 127)) | (1 << (ECMAScriptParser.Identifier - 127)) | (1 << (ECMAScriptParser.StringLiteral - 127)) | (1 << (ECMAScriptParser.TemplateStringLiteral - 127)))) !== 0)) {
                this.state = 384;
                this.expressionSequence();
            }

            this.state = 387;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 388;
            this.statement();
            break;

        case 4:
            localctx = new ForInStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 389;
            this.match(ECMAScriptParser.For);
            this.state = 390;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 393;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ECMAScriptParser.RegularExpressionLiteral:
            case ECMAScriptParser.OpenBracket:
            case ECMAScriptParser.OpenParen:
            case ECMAScriptParser.OpenBrace:
            case ECMAScriptParser.PlusPlus:
            case ECMAScriptParser.MinusMinus:
            case ECMAScriptParser.Plus:
            case ECMAScriptParser.Minus:
            case ECMAScriptParser.BitNot:
            case ECMAScriptParser.Not:
            case ECMAScriptParser.NullLiteral:
            case ECMAScriptParser.BooleanLiteral:
            case ECMAScriptParser.DecimalLiteral:
            case ECMAScriptParser.HexIntegerLiteral:
            case ECMAScriptParser.OctalIntegerLiteral:
            case ECMAScriptParser.OctalIntegerLiteral2:
            case ECMAScriptParser.BinaryIntegerLiteral:
            case ECMAScriptParser.BigHexIntegerLiteral:
            case ECMAScriptParser.BigOctalIntegerLiteral:
            case ECMAScriptParser.BigBinaryIntegerLiteral:
            case ECMAScriptParser.BigDecimalIntegerLiteral:
            case ECMAScriptParser.Typeof:
            case ECMAScriptParser.New:
            case ECMAScriptParser.Void:
            case ECMAScriptParser.Function:
            case ECMAScriptParser.This:
            case ECMAScriptParser.Delete:
            case ECMAScriptParser.Class:
            case ECMAScriptParser.Super:
            case ECMAScriptParser.Import:
            case ECMAScriptParser.Async:
            case ECMAScriptParser.Await:
            case ECMAScriptParser.Select:
            case ECMAScriptParser.Using:
            case ECMAScriptParser.NonStrictLet:
            case ECMAScriptParser.Yield:
            case ECMAScriptParser.Identifier:
            case ECMAScriptParser.StringLiteral:
            case ECMAScriptParser.TemplateStringLiteral:
                this.state = 391;
                this.singleExpression(0);
                break;
            case ECMAScriptParser.Var:
            case ECMAScriptParser.Let:
            case ECMAScriptParser.Const:
                this.state = 392;
                this.variableDeclarationList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 395;
            this.match(ECMAScriptParser.In);
            this.state = 396;
            this.expressionSequence();
            this.state = 397;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 398;
            this.statement();
            break;

        case 5:
            localctx = new ForOfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 400;
            this.match(ECMAScriptParser.For);
            this.state = 402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Await) {
                this.state = 401;
                this.match(ECMAScriptParser.Await);
            }

            this.state = 404;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 407;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ECMAScriptParser.RegularExpressionLiteral:
            case ECMAScriptParser.OpenBracket:
            case ECMAScriptParser.OpenParen:
            case ECMAScriptParser.OpenBrace:
            case ECMAScriptParser.PlusPlus:
            case ECMAScriptParser.MinusMinus:
            case ECMAScriptParser.Plus:
            case ECMAScriptParser.Minus:
            case ECMAScriptParser.BitNot:
            case ECMAScriptParser.Not:
            case ECMAScriptParser.NullLiteral:
            case ECMAScriptParser.BooleanLiteral:
            case ECMAScriptParser.DecimalLiteral:
            case ECMAScriptParser.HexIntegerLiteral:
            case ECMAScriptParser.OctalIntegerLiteral:
            case ECMAScriptParser.OctalIntegerLiteral2:
            case ECMAScriptParser.BinaryIntegerLiteral:
            case ECMAScriptParser.BigHexIntegerLiteral:
            case ECMAScriptParser.BigOctalIntegerLiteral:
            case ECMAScriptParser.BigBinaryIntegerLiteral:
            case ECMAScriptParser.BigDecimalIntegerLiteral:
            case ECMAScriptParser.Typeof:
            case ECMAScriptParser.New:
            case ECMAScriptParser.Void:
            case ECMAScriptParser.Function:
            case ECMAScriptParser.This:
            case ECMAScriptParser.Delete:
            case ECMAScriptParser.Class:
            case ECMAScriptParser.Super:
            case ECMAScriptParser.Import:
            case ECMAScriptParser.Async:
            case ECMAScriptParser.Await:
            case ECMAScriptParser.Select:
            case ECMAScriptParser.Using:
            case ECMAScriptParser.NonStrictLet:
            case ECMAScriptParser.Yield:
            case ECMAScriptParser.Identifier:
            case ECMAScriptParser.StringLiteral:
            case ECMAScriptParser.TemplateStringLiteral:
                this.state = 405;
                this.singleExpression(0);
                break;
            case ECMAScriptParser.Var:
            case ECMAScriptParser.Let:
            case ECMAScriptParser.Const:
                this.state = 406;
                this.variableDeclarationList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 409;
            this.identifier();
            this.state = 410;
            if (!( this.p("of"))) {
                throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
            }
            this.state = 411;
            this.expressionSequence();
            this.state = 412;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 413;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_varModifier;
    return this;
}

VarModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarModifierContext.prototype.constructor = VarModifierContext;

VarModifierContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

VarModifierContext.prototype.Let = function() {
    return this.getToken(ECMAScriptParser.Let, 0);
};

VarModifierContext.prototype.Const = function() {
    return this.getToken(ECMAScriptParser.Const, 0);
};

VarModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitVarModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.VarModifierContext = VarModifierContext;

ECMAScriptParser.prototype.varModifier = function() {

    var localctx = new VarModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ECMAScriptParser.RULE_varModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        _la = this._input.LA(1);
        if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (ECMAScriptParser.Var - 77)) | (1 << (ECMAScriptParser.Let - 77)) | (1 << (ECMAScriptParser.Const - 77)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptParser.Continue, 0);
};

ContinueStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ContinueStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ContinueStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitContinueStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ContinueStatementContext = ContinueStatementContext;

ECMAScriptParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ECMAScriptParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 419;
        this.match(ECMAScriptParser.Continue);
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 420;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 421;
            this.identifier();

        }
        this.state = 424;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(ECMAScriptParser.Break, 0);
};

BreakStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

BreakStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BreakStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBreakStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.BreakStatementContext = BreakStatementContext;

ECMAScriptParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ECMAScriptParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 426;
        this.match(ECMAScriptParser.Break);
        this.state = 429;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 427;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 428;
            this.identifier();

        }
        this.state = 431;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(ECMAScriptParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ReturnStatementContext = ReturnStatementContext;

ECMAScriptParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ECMAScriptParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.match(ECMAScriptParser.Return);
        this.state = 436;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 434;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 435;
            this.expressionSequence();

        }
        this.state = 438;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
    return this.getToken(ECMAScriptParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

WithStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

WithStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitWithStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.WithStatementContext = WithStatementContext;

ECMAScriptParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ECMAScriptParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(ECMAScriptParser.With);
        this.state = 441;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 442;
        this.expressionSequence();
        this.state = 443;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 444;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

SwitchStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
    return this.getTypedRuleContext(CaseBlockContext,0);
};

SwitchStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitSwitchStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.SwitchStatementContext = SwitchStatementContext;

ECMAScriptParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ECMAScriptParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        this.match(ECMAScriptParser.Switch);
        this.state = 447;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 448;
        this.expressionSequence();
        this.state = 449;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 450;
        this.caseBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseBlock;
    return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClausesContext);
    } else {
        return this.getTypedRuleContext(CaseClausesContext,i);
    }
};

CaseBlockContext.prototype.defaultClause = function() {
    return this.getTypedRuleContext(DefaultClauseContext,0);
};

CaseBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitCaseBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.CaseBlockContext = CaseBlockContext;

ECMAScriptParser.prototype.caseBlock = function() {

    var localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ECMAScriptParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 452;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Case) {
            this.state = 453;
            this.caseClauses();
        }

        this.state = 460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Default) {
            this.state = 456;
            this.defaultClause();
            this.state = 458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Case) {
                this.state = 457;
                this.caseClauses();
            }

        }

        this.state = 462;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseClauses;
    return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClauseContext);
    } else {
        return this.getTypedRuleContext(CaseClauseContext,i);
    }
};

CaseClausesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitCaseClauses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.CaseClausesContext = CaseClausesContext;

ECMAScriptParser.prototype.caseClauses = function() {

    var localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ECMAScriptParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 465; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 464;
            this.caseClause();
            this.state = 467; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptParser.Case);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseClause;
    return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
    return this.getToken(ECMAScriptParser.Case, 0);
};

CaseClauseContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

CaseClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CaseClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitCaseClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.CaseClauseContext = CaseClauseContext;

ECMAScriptParser.prototype.caseClause = function() {

    var localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ECMAScriptParser.RULE_caseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this.match(ECMAScriptParser.Case);
        this.state = 470;
        this.expressionSequence();
        this.state = 471;
        this.match(ECMAScriptParser.Colon);
        this.state = 473;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 472;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_defaultClause;
    return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

DefaultClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitDefaultClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.DefaultClauseContext = DefaultClauseContext;

ECMAScriptParser.prototype.defaultClause = function() {

    var localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ECMAScriptParser.RULE_defaultClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 475;
        this.match(ECMAScriptParser.Default);
        this.state = 476;
        this.match(ECMAScriptParser.Colon);
        this.state = 478;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 477;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_labelledStatement;
    return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabelledStatementContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

LabelledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabelledStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitLabelledStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.LabelledStatementContext = LabelledStatementContext;

ECMAScriptParser.prototype.labelledStatement = function() {

    var localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ECMAScriptParser.RULE_labelledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this.identifier();
        this.state = 481;
        this.match(ECMAScriptParser.Colon);
        this.state = 482;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptParser.Throw, 0);
};

ThrowStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ThrowStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ThrowStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitThrowStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ThrowStatementContext = ThrowStatementContext;

ECMAScriptParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ECMAScriptParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.match(ECMAScriptParser.Throw);
        this.state = 485;
        if (!( this.notLineTerminator())) {
            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 486;
        this.expressionSequence();
        this.state = 487;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
    return this.getToken(ECMAScriptParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catchProduction = function() {
    return this.getTypedRuleContext(CatchProductionContext,0);
};

TryStatementContext.prototype.finallyProduction = function() {
    return this.getTypedRuleContext(FinallyProductionContext,0);
};

TryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitTryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.TryStatementContext = TryStatementContext;

ECMAScriptParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ECMAScriptParser.RULE_tryStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 489;
        this.match(ECMAScriptParser.Try);
        this.state = 490;
        this.block();
        this.state = 496;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Catch:
            this.state = 491;
            this.catchProduction();
            this.state = 493;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 492;
                this.finallyProduction();

            }
            break;
        case ECMAScriptParser.Finally:
            this.state = 495;
            this.finallyProduction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_catchProduction;
    return this;
}

CatchProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchProductionContext.prototype.constructor = CatchProductionContext;

CatchProductionContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptParser.Catch, 0);
};

CatchProductionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchProductionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

CatchProductionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

CatchProductionContext.prototype.assignable = function() {
    return this.getTypedRuleContext(AssignableContext,0);
};

CatchProductionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitCatchProduction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.CatchProductionContext = CatchProductionContext;

ECMAScriptParser.prototype.catchProduction = function() {

    var localctx = new CatchProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ECMAScriptParser.RULE_catchProduction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this.match(ECMAScriptParser.Catch);
        this.state = 504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.OpenParen) {
            this.state = 499;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 501;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.OpenBracket || _la===ECMAScriptParser.OpenBrace || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
                this.state = 500;
                this.assignable();
            }

            this.state = 503;
            this.match(ECMAScriptParser.CloseParen);
        }

        this.state = 506;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FinallyProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_finallyProduction;
    return this;
}

FinallyProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyProductionContext.prototype.constructor = FinallyProductionContext;

FinallyProductionContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptParser.Finally, 0);
};

FinallyProductionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyProductionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFinallyProduction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.FinallyProductionContext = FinallyProductionContext;

ECMAScriptParser.prototype.finallyProduction = function() {

    var localctx = new FinallyProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ECMAScriptParser.RULE_finallyProduction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 508;
        this.match(ECMAScriptParser.Finally);
        this.state = 509;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DebuggerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_debuggerStatement;
    return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

DebuggerStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitDebuggerStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.DebuggerStatementContext = DebuggerStatementContext;

ECMAScriptParser.prototype.debuggerStatement = function() {

    var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ECMAScriptParser.RULE_debuggerStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this.match(ECMAScriptParser.Debugger);
        this.state = 512;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

FunctionDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};

FunctionDeclarationContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

FunctionDeclarationContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FunctionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFunctionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;

ECMAScriptParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ECMAScriptParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Async) {
            this.state = 514;
            this.match(ECMAScriptParser.Async);
        }

        this.state = 517;
        this.match(ECMAScriptParser.Function);
        this.state = 519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Multiply) {
            this.state = 518;
            this.match(ECMAScriptParser.Multiply);
        }

        this.state = 521;
        this.identifier();
        this.state = 522;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 524;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
            this.state = 523;
            this.formalParameterList();
        }

        this.state = 526;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 527;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 528;
        this.functionBody();
        this.state = 529;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

ClassDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassDeclarationContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ClassDeclarationContext = ClassDeclarationContext;

ECMAScriptParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ECMAScriptParser.RULE_classDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 531;
        this.match(ECMAScriptParser.Class);
        this.state = 532;
        this.identifier();
        this.state = 533;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classTail;
    return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ClassTailContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ClassTailContext.prototype.classHeritage = function() {
    return this.getTypedRuleContext(ClassHeritageContext,0);
};

ClassTailContext.prototype.classElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassElementContext);
    } else {
        return this.getTypedRuleContext(ClassElementContext,i);
    }
};

ClassTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitClassTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ClassTailContext = ClassTailContext;

ECMAScriptParser.prototype.classTail = function() {

    var localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ECMAScriptParser.RULE_classTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Extends) {
            this.state = 535;
            this.classHeritage();
        }

        this.state = 538;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 542;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 539;
                this.classElement(); 
            }
            this.state = 544;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

        this.state = 545;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassHeritageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classHeritage;
    return this;
}

ClassHeritageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassHeritageContext.prototype.constructor = ClassHeritageContext;

ClassHeritageContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptParser.Extends, 0);
};

ClassHeritageContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ClassHeritageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitClassHeritage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ClassHeritageContext = ClassHeritageContext;

ECMAScriptParser.prototype.classHeritage = function() {

    var localctx = new ClassHeritageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ECMAScriptParser.RULE_classHeritage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.match(ECMAScriptParser.Extends);
        this.state = 548;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classElement;
    return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassElementContext.prototype.Static = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Static);
    } else {
        return this.getToken(ECMAScriptParser.Static, i);
    }
};


ClassElementContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ClassElementContext.prototype.Async = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Async);
    } else {
        return this.getToken(ECMAScriptParser.Async, i);
    }
};


ClassElementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

ClassElementContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

ClassElementContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};

ClassElementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ClassElementContext.prototype.Hashtag = function() {
    return this.getToken(ECMAScriptParser.Hashtag, 0);
};

ClassElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitClassElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ClassElementContext = ClassElementContext;

ECMAScriptParser.prototype.classElement = function() {

    var localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ECMAScriptParser.RULE_classElement);
    var _la = 0; // Token type
    try {
        this.state = 568;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 556;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 554;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 550;
                        this.match(ECMAScriptParser.Static);
                        break;

                    case 2:
                        this.state = 551;
                        if (!( this.n("static"))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
                        }
                        this.state = 552;
                        this.identifier();
                        break;

                    case 3:
                        this.state = 553;
                        this.match(ECMAScriptParser.Async);
                        break;

                    } 
                }
                this.state = 558;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
            }

            this.state = 559;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 560;
            this.emptyStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 562;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Hashtag) {
                this.state = 561;
                this.match(ECMAScriptParser.Hashtag);
            }

            this.state = 564;
            this.propertyName();
            this.state = 565;
            this.match(ECMAScriptParser.Assign);
            this.state = 566;
            this.singleExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

MethodDefinitionContext.prototype.Hashtag = function() {
    return this.getToken(ECMAScriptParser.Hashtag, 0);
};

MethodDefinitionContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

MethodDefinitionContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

MethodDefinitionContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

MethodDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitMethodDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.MethodDefinitionContext = MethodDefinitionContext;

ECMAScriptParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ECMAScriptParser.RULE_methodDefinition);
    var _la = 0; // Token type
    try {
        this.state = 615;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Multiply) {
                this.state = 570;
                this.match(ECMAScriptParser.Multiply);
            }

            this.state = 574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Hashtag) {
                this.state = 573;
                this.match(ECMAScriptParser.Hashtag);
            }

            this.state = 576;
            this.propertyName();
            this.state = 577;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
                this.state = 578;
                this.formalParameterList();
            }

            this.state = 581;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 582;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 583;
            this.functionBody();
            this.state = 584;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 587;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
            if(la_===1) {
                this.state = 586;
                this.match(ECMAScriptParser.Multiply);

            }
            this.state = 590;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 589;
                this.match(ECMAScriptParser.Hashtag);

            }
            this.state = 592;
            this.getter();
            this.state = 593;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 594;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 595;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 596;
            this.functionBody();
            this.state = 597;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 600;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            if(la_===1) {
                this.state = 599;
                this.match(ECMAScriptParser.Multiply);

            }
            this.state = 603;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
            if(la_===1) {
                this.state = 602;
                this.match(ECMAScriptParser.Hashtag);

            }
            this.state = 605;
            this.setter();
            this.state = 606;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
                this.state = 607;
                this.formalParameterList();
            }

            this.state = 610;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 611;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 612;
            this.functionBody();
            this.state = 613;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameterArg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterArgContext);
    } else {
        return this.getTypedRuleContext(FormalParameterArgContext,i);
    }
};

FormalParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


FormalParameterListContext.prototype.lastFormalParameterArg = function() {
    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.FormalParameterListContext = FormalParameterListContext;

ECMAScriptParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ECMAScriptParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 632;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.OpenBracket:
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.NonStrictLet:
        case ECMAScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 617;
            this.formalParameterArg();
            this.state = 622;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 618;
                    this.match(ECMAScriptParser.Comma);
                    this.state = 619;
                    this.formalParameterArg(); 
                }
                this.state = 624;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
            }

            this.state = 629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 625;
                this.match(ECMAScriptParser.Comma);
                this.state = 627;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptParser.Ellipsis) {
                    this.state = 626;
                    this.lastFormalParameterArg();
                }

            }

            break;
        case ECMAScriptParser.Ellipsis:
            this.enterOuterAlt(localctx, 2);
            this.state = 631;
            this.lastFormalParameterArg();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameterArg;
    return this;
}

FormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterArgContext.prototype.constructor = FormalParameterArgContext;

FormalParameterArgContext.prototype.assignable = function() {
    return this.getTypedRuleContext(AssignableContext,0);
};

FormalParameterArgContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};

FormalParameterArgContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

FormalParameterArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFormalParameterArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.FormalParameterArgContext = FormalParameterArgContext;

ECMAScriptParser.prototype.formalParameterArg = function() {

    var localctx = new FormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ECMAScriptParser.RULE_formalParameterArg);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 634;
        this.assignable();
        this.state = 637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Assign) {
            this.state = 635;
            this.match(ECMAScriptParser.Assign);
            this.state = 636;
            this.singleExpression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LastFormalParameterArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_lastFormalParameterArg;
    return this;
}

LastFormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterArgContext.prototype.constructor = LastFormalParameterArgContext;

LastFormalParameterArgContext.prototype.Ellipsis = function() {
    return this.getToken(ECMAScriptParser.Ellipsis, 0);
};

LastFormalParameterArgContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

LastFormalParameterArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitLastFormalParameterArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext;

ECMAScriptParser.prototype.lastFormalParameterArg = function() {

    var localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ECMAScriptParser.RULE_lastFormalParameterArg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.match(ECMAScriptParser.Ellipsis);
        this.state = 640;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.sourceElements = function() {
    return this.getTypedRuleContext(SourceElementsContext,0);
};

FunctionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFunctionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.FunctionBodyContext = FunctionBodyContext;

ECMAScriptParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ECMAScriptParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 642;
            this.sourceElements();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_sourceElements;
    return this;
}

SourceElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementsContext.prototype.constructor = SourceElementsContext;

SourceElementsContext.prototype.sourceElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SourceElementContext);
    } else {
        return this.getTypedRuleContext(SourceElementContext,i);
    }
};

SourceElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitSourceElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.SourceElementsContext = SourceElementsContext;

ECMAScriptParser.prototype.sourceElements = function() {

    var localctx = new SourceElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ECMAScriptParser.RULE_sourceElements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 645;
        		this.sourceElement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 648; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArrayLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ArrayLiteralContext = ArrayLiteralContext;

ECMAScriptParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ECMAScriptParser.RULE_arrayLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this.match(ECMAScriptParser.OpenBracket);
        this.state = 651;
        this.elementList();
        this.state = 652;
        this.match(ECMAScriptParser.CloseBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ElementListContext.prototype.arrayElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayElementContext);
    } else {
        return this.getTypedRuleContext(ArrayElementContext,i);
    }
};

ElementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitElementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ElementListContext = ElementListContext;

ECMAScriptParser.prototype.elementList = function() {

    var localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ECMAScriptParser.RULE_elementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 654;
                this.match(ECMAScriptParser.Comma); 
            }
            this.state = 659;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

        this.state = 661;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ECMAScriptParser.NullLiteral - 59)) | (1 << (ECMAScriptParser.BooleanLiteral - 59)) | (1 << (ECMAScriptParser.DecimalLiteral - 59)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (ECMAScriptParser.BinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigHexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.Typeof - 59)) | (1 << (ECMAScriptParser.New - 59)) | (1 << (ECMAScriptParser.Void - 59)) | (1 << (ECMAScriptParser.Function - 59)) | (1 << (ECMAScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (ECMAScriptParser.Delete - 93)) | (1 << (ECMAScriptParser.Class - 93)) | (1 << (ECMAScriptParser.Super - 93)) | (1 << (ECMAScriptParser.Import - 93)) | (1 << (ECMAScriptParser.Async - 93)) | (1 << (ECMAScriptParser.Await - 93)) | (1 << (ECMAScriptParser.Select - 93)) | (1 << (ECMAScriptParser.Using - 93)) | (1 << (ECMAScriptParser.NonStrictLet - 93)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (ECMAScriptParser.Yield - 127)) | (1 << (ECMAScriptParser.Identifier - 127)) | (1 << (ECMAScriptParser.StringLiteral - 127)) | (1 << (ECMAScriptParser.TemplateStringLiteral - 127)))) !== 0)) {
            this.state = 660;
            this.arrayElement();
        }

        this.state = 671;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 664; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 663;
                    this.match(ECMAScriptParser.Comma);
                    this.state = 666; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===ECMAScriptParser.Comma);
                this.state = 668;
                this.arrayElement(); 
            }
            this.state = 673;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

        this.state = 677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptParser.Comma) {
            this.state = 674;
            this.match(ECMAScriptParser.Comma);
            this.state = 679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrayElement;
    return this;
}

ArrayElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayElementContext.prototype.constructor = ArrayElementContext;

ArrayElementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArrayElementContext.prototype.Ellipsis = function() {
    return this.getToken(ECMAScriptParser.Ellipsis, 0);
};

ArrayElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArrayElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ArrayElementContext = ArrayElementContext;

ECMAScriptParser.prototype.arrayElement = function() {

    var localctx = new ArrayElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ECMAScriptParser.RULE_arrayElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Ellipsis) {
            this.state = 680;
            this.match(ECMAScriptParser.Ellipsis);
        }

        this.state = 683;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyAssignment;
    return this;
}

PropertyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAssignmentContext.prototype.constructor = PropertyAssignmentContext;


 
PropertyAssignmentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PropertyExpressionAssignmentContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyExpressionAssignmentContext.prototype.constructor = PropertyExpressionAssignmentContext;

ECMAScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

PropertyExpressionAssignmentContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

PropertyExpressionAssignmentContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

PropertyExpressionAssignmentContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPropertyExpressionAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComputedPropertyExpressionAssignmentContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComputedPropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
ComputedPropertyExpressionAssignmentContext.prototype.constructor = ComputedPropertyExpressionAssignmentContext;

ECMAScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

ComputedPropertyExpressionAssignmentContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

ComputedPropertyExpressionAssignmentContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};
ComputedPropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitComputedPropertyExpressionAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertyShorthandContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyShorthandContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyShorthandContext.prototype.constructor = PropertyShorthandContext;

ECMAScriptParser.PropertyShorthandContext = PropertyShorthandContext;

PropertyShorthandContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PropertyShorthandContext.prototype.Ellipsis = function() {
    return this.getToken(ECMAScriptParser.Ellipsis, 0);
};
PropertyShorthandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPropertyShorthand(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertySetterContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertySetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertySetterContext.prototype.constructor = PropertySetterContext;

ECMAScriptParser.PropertySetterContext = PropertySetterContext;

PropertySetterContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertySetterContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

PropertySetterContext.prototype.formalParameterArg = function() {
    return this.getTypedRuleContext(FormalParameterArgContext,0);
};

PropertySetterContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

PropertySetterContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

PropertySetterContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

PropertySetterContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};
PropertySetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPropertySetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertyGetterContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyGetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyGetterContext.prototype.constructor = PropertyGetterContext;

ECMAScriptParser.PropertyGetterContext = PropertyGetterContext;

PropertyGetterContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyGetterContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

PropertyGetterContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

PropertyGetterContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

PropertyGetterContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

PropertyGetterContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};
PropertyGetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPropertyGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionPropertyContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionPropertyContext.prototype = Object.create(PropertyAssignmentContext.prototype);
FunctionPropertyContext.prototype.constructor = FunctionPropertyContext;

ECMAScriptParser.FunctionPropertyContext = FunctionPropertyContext;

FunctionPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

FunctionPropertyContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

FunctionPropertyContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

FunctionPropertyContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

FunctionPropertyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionPropertyContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

FunctionPropertyContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};

FunctionPropertyContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

FunctionPropertyContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};
FunctionPropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFunctionProperty(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.PropertyAssignmentContext = PropertyAssignmentContext;

ECMAScriptParser.prototype.propertyAssignment = function() {

    var localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ECMAScriptParser.RULE_propertyAssignment);
    var _la = 0; // Token type
    try {
        this.state = 730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PropertyExpressionAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 685;
            this.propertyName();
            this.state = 686;
            this.match(ECMAScriptParser.Colon);
            this.state = 687;
            this.singleExpression(0);
            break;

        case 2:
            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 689;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 690;
            this.singleExpression(0);
            this.state = 691;
            this.match(ECMAScriptParser.CloseBracket);
            this.state = 692;
            this.match(ECMAScriptParser.Colon);
            this.state = 693;
            this.singleExpression(0);
            break;

        case 3:
            localctx = new FunctionPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 696;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
            if(la_===1) {
                this.state = 695;
                this.match(ECMAScriptParser.Async);

            }
            this.state = 699;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Multiply) {
                this.state = 698;
                this.match(ECMAScriptParser.Multiply);
            }

            this.state = 701;
            this.propertyName();
            this.state = 702;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
                this.state = 703;
                this.formalParameterList();
            }

            this.state = 706;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 707;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 708;
            this.functionBody();
            this.state = 709;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 4:
            localctx = new PropertyGetterContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 711;
            this.getter();
            this.state = 712;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 713;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 714;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 715;
            this.functionBody();
            this.state = 716;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 5:
            localctx = new PropertySetterContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 718;
            this.setter();
            this.state = 719;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 720;
            this.formalParameterArg();
            this.state = 721;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 722;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 723;
            this.functionBody();
            this.state = 724;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 6:
            localctx = new PropertyShorthandContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 727;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Ellipsis) {
                this.state = 726;
                this.match(ECMAScriptParser.Ellipsis);
            }

            this.state = 729;
            this.singleExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

PropertyNameContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

PropertyNameContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

PropertyNameContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

PropertyNameContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PropertyNameContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

PropertyNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPropertyName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.PropertyNameContext = PropertyNameContext;

ECMAScriptParser.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ECMAScriptParser.RULE_propertyName);
    try {
        this.state = 739;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.While:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.This:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.As:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Enum:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Implements:
        case ECMAScriptParser.Private:
        case ECMAScriptParser.Public:
        case ECMAScriptParser.Interface:
        case ECMAScriptParser.Package:
        case ECMAScriptParser.Protected:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 732;
            this.identifierName();
            break;
        case ECMAScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 733;
            this.match(ECMAScriptParser.StringLiteral);
            break;
        case ECMAScriptParser.DecimalLiteral:
        case ECMAScriptParser.HexIntegerLiteral:
        case ECMAScriptParser.OctalIntegerLiteral:
        case ECMAScriptParser.OctalIntegerLiteral2:
        case ECMAScriptParser.BinaryIntegerLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 734;
            this.numericLiteral();
            break;
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 4);
            this.state = 735;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 736;
            this.singleExpression(0);
            this.state = 737;
            this.match(ECMAScriptParser.CloseBracket);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ArgumentsContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

ArgumentsContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ArgumentsContext = ArgumentsContext;

ECMAScriptParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ECMAScriptParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 741;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ECMAScriptParser.NullLiteral - 59)) | (1 << (ECMAScriptParser.BooleanLiteral - 59)) | (1 << (ECMAScriptParser.DecimalLiteral - 59)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (ECMAScriptParser.BinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigHexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.Typeof - 59)) | (1 << (ECMAScriptParser.New - 59)) | (1 << (ECMAScriptParser.Void - 59)) | (1 << (ECMAScriptParser.Function - 59)) | (1 << (ECMAScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (ECMAScriptParser.Delete - 93)) | (1 << (ECMAScriptParser.Class - 93)) | (1 << (ECMAScriptParser.Super - 93)) | (1 << (ECMAScriptParser.Import - 93)) | (1 << (ECMAScriptParser.Async - 93)) | (1 << (ECMAScriptParser.Await - 93)) | (1 << (ECMAScriptParser.Select - 93)) | (1 << (ECMAScriptParser.Using - 93)) | (1 << (ECMAScriptParser.NonStrictLet - 93)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (ECMAScriptParser.Yield - 127)) | (1 << (ECMAScriptParser.Identifier - 127)) | (1 << (ECMAScriptParser.StringLiteral - 127)) | (1 << (ECMAScriptParser.TemplateStringLiteral - 127)))) !== 0)) {
            this.state = 742;
            this.argument();
            this.state = 747;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 743;
                    this.match(ECMAScriptParser.Comma);
                    this.state = 744;
                    this.argument(); 
                }
                this.state = 749;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
            }

            this.state = 751;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 750;
                this.match(ECMAScriptParser.Comma);
            }

        }

        this.state = 755;
        this.match(ECMAScriptParser.CloseParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ArgumentContext.prototype.Ellipsis = function() {
    return this.getToken(ECMAScriptParser.Ellipsis, 0);
};

ArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ArgumentContext = ArgumentContext;

ECMAScriptParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ECMAScriptParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Ellipsis) {
            this.state = 757;
            this.match(ECMAScriptParser.Ellipsis);
        }

        this.state = 762;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.state = 760;
            this.singleExpression(0);
            break;

        case 2:
            this.state = 761;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expressionSequence;
    return this;
}

ExpressionSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSequenceContext.prototype.constructor = ExpressionSequenceContext;

ExpressionSequenceContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

ExpressionSequenceContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ExpressionSequenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitExpressionSequence(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ExpressionSequenceContext = ExpressionSequenceContext;

ECMAScriptParser.prototype.expressionSequence = function() {

    var localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ECMAScriptParser.RULE_expressionSequence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 764;
        this.singleExpression(0);
        this.state = 769;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 765;
                this.match(ECMAScriptParser.Comma);
                this.state = 766;
                this.singleExpression(0); 
            }
            this.state = 771;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;


 
SingleExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TemplateStringExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TemplateStringExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TemplateStringExpressionContext.prototype.constructor = TemplateStringExpressionContext;

ECMAScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

TemplateStringExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

TemplateStringExpressionContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(ECMAScriptParser.TemplateStringLiteral, 0);
};
TemplateStringExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitTemplateStringExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TernaryExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

ECMAScriptParser.TernaryExpressionContext = TernaryExpressionContext;

TernaryExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

TernaryExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptParser.QuestionMark, 0);
};

TernaryExpressionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};
TernaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitTernaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalAndExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalAndExpressionContext.prototype.constructor = LogicalAndExpressionContext;

ECMAScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

LogicalAndExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

LogicalAndExpressionContext.prototype.And = function() {
    return this.getToken(ECMAScriptParser.And, 0);
};
LogicalAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitLogicalAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PowerExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PowerExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PowerExpressionContext.prototype.constructor = PowerExpressionContext;

ECMAScriptParser.PowerExpressionContext = PowerExpressionContext;

PowerExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

PowerExpressionContext.prototype.Power = function() {
    return this.getToken(ECMAScriptParser.Power, 0);
};
PowerExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPowerExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreIncrementExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreIncrementExpressionContext.prototype.constructor = PreIncrementExpressionContext;

ECMAScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

PreIncrementExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptParser.PlusPlus, 0);
};

PreIncrementExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PreIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPreIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ObjectLiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ObjectLiteralExpressionContext.prototype.constructor = ObjectLiteralExpressionContext;

ECMAScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

ObjectLiteralExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};
ObjectLiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitObjectLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MetaExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MetaExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MetaExpressionContext.prototype.constructor = MetaExpressionContext;

ECMAScriptParser.MetaExpressionContext = MetaExpressionContext;

MetaExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

MetaExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

MetaExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
MetaExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitMetaExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

ECMAScriptParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

InExpressionContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};
InExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitInExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalOrExpressionContext.prototype.constructor = LogicalOrExpressionContext;

ECMAScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

LogicalOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

LogicalOrExpressionContext.prototype.Or = function() {
    return this.getToken(ECMAScriptParser.Or, 0);
};
LogicalOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitLogicalOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

ECMAScriptParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.Not = function() {
    return this.getToken(ECMAScriptParser.Not, 0);
};

NotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
NotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreDecreaseExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreDecreaseExpressionContext.prototype.constructor = PreDecreaseExpressionContext;

ECMAScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

PreDecreaseExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptParser.MinusMinus, 0);
};

PreDecreaseExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PreDecreaseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPreDecreaseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArgumentsExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentsExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArgumentsExpressionContext.prototype.constructor = ArgumentsExpressionContext;

ECMAScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

ArgumentsExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArgumentsExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
ArgumentsExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArgumentsExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AwaitExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AwaitExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AwaitExpressionContext.prototype.constructor = AwaitExpressionContext;

ECMAScriptParser.AwaitExpressionContext = AwaitExpressionContext;

AwaitExpressionContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

AwaitExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
AwaitExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAwaitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ThisExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

ECMAScriptParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};
ThisExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitThisExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

ECMAScriptParser.FunctionExpressionContext = FunctionExpressionContext;

FunctionExpressionContext.prototype.anoymousFunction = function() {
    return this.getTypedRuleContext(AnoymousFunctionContext,0);
};
FunctionExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFunctionExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryMinusExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryMinusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryMinusExpressionContext.prototype.constructor = UnaryMinusExpressionContext;

ECMAScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

UnaryMinusExpressionContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptParser.Minus, 0);
};

UnaryMinusExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
UnaryMinusExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitUnaryMinusExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignmentExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

ECMAScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

AssignmentExpressionContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};
AssignmentExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAssignmentExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostDecreaseExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostDecreaseExpressionContext.prototype.constructor = PostDecreaseExpressionContext;

ECMAScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

PostDecreaseExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PostDecreaseExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptParser.MinusMinus, 0);
};
PostDecreaseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPostDecreaseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberNewExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberNewExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberNewExpressionContext.prototype.constructor = MemberNewExpressionContext;

ECMAScriptParser.MemberNewExpressionContext = MemberNewExpressionContext;

MemberNewExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

MemberNewExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

MemberNewExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

MemberNewExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

MemberNewExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
MemberNewExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitMemberNewExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TypeofExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

ECMAScriptParser.TypeofExpressionContext = TypeofExpressionContext;

TypeofExpressionContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptParser.Typeof, 0);
};

TypeofExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
TypeofExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitTypeofExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InstanceofExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InstanceofExpressionContext.prototype.constructor = InstanceofExpressionContext;

ECMAScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

InstanceofExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

InstanceofExpressionContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptParser.Instanceof, 0);
};
InstanceofExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitInstanceofExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryPlusExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryPlusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryPlusExpressionContext.prototype.constructor = UnaryPlusExpressionContext;

ECMAScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

UnaryPlusExpressionContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptParser.Plus, 0);
};

UnaryPlusExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
UnaryPlusExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitUnaryPlusExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DeleteExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeleteExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
DeleteExpressionContext.prototype.constructor = DeleteExpressionContext;

ECMAScriptParser.DeleteExpressionContext = DeleteExpressionContext;

DeleteExpressionContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptParser.Delete, 0);
};

DeleteExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
DeleteExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitDeleteExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InlinedQueryExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlinedQueryExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InlinedQueryExpressionContext.prototype.constructor = InlinedQueryExpressionContext;

ECMAScriptParser.InlinedQueryExpressionContext = InlinedQueryExpressionContext;

InlinedQueryExpressionContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};
InlinedQueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitInlinedQueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ImportExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImportExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ImportExpressionContext.prototype.constructor = ImportExpressionContext;

ECMAScriptParser.ImportExpressionContext = ImportExpressionContext;

ImportExpressionContext.prototype.Import = function() {
    return this.getToken(ECMAScriptParser.Import, 0);
};

ImportExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ImportExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ImportExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};
ImportExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitImportExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EqualityExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

ECMAScriptParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

EqualityExpressionContext.prototype.Equals_ = function() {
    return this.getToken(ECMAScriptParser.Equals_, 0);
};

EqualityExpressionContext.prototype.NotEquals = function() {
    return this.getToken(ECMAScriptParser.NotEquals, 0);
};

EqualityExpressionContext.prototype.IdentityEquals = function() {
    return this.getToken(ECMAScriptParser.IdentityEquals, 0);
};

EqualityExpressionContext.prototype.IdentityNotEquals = function() {
    return this.getToken(ECMAScriptParser.IdentityNotEquals, 0);
};
EqualityExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitEqualityExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitXOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitXOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitXOrExpressionContext.prototype.constructor = BitXOrExpressionContext;

ECMAScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

BitXOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitXOrExpressionContext.prototype.BitXOr = function() {
    return this.getToken(ECMAScriptParser.BitXOr, 0);
};
BitXOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBitXOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SuperExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
SuperExpressionContext.prototype.constructor = SuperExpressionContext;

ECMAScriptParser.SuperExpressionContext = SuperExpressionContext;

SuperExpressionContext.prototype.Super = function() {
    return this.getToken(ECMAScriptParser.Super, 0);
};
SuperExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitSuperExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultiplicativeExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

ECMAScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

MultiplicativeExpressionContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

MultiplicativeExpressionContext.prototype.Divide = function() {
    return this.getToken(ECMAScriptParser.Divide, 0);
};

MultiplicativeExpressionContext.prototype.Modulus = function() {
    return this.getToken(ECMAScriptParser.Modulus, 0);
};
MultiplicativeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitMultiplicativeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitShiftExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitShiftExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitShiftExpressionContext.prototype.constructor = BitShiftExpressionContext;

ECMAScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

BitShiftExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitShiftExpressionContext.prototype.LeftShiftArithmetic = function() {
    return this.getToken(ECMAScriptParser.LeftShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftArithmetic = function() {
    return this.getToken(ECMAScriptParser.RightShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftLogical = function() {
    return this.getToken(ECMAScriptParser.RightShiftLogical, 0);
};
BitShiftExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBitShiftExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

ECMAScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ParenthesizedExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ParenthesizedExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};
ParenthesizedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitParenthesizedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AdditiveExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

ECMAScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptParser.Plus, 0);
};

AdditiveExpressionContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptParser.Minus, 0);
};
AdditiveExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAdditiveExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelationalExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

ECMAScriptParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

RelationalExpressionContext.prototype.LessThan = function() {
    return this.getToken(ECMAScriptParser.LessThan, 0);
};

RelationalExpressionContext.prototype.MoreThan = function() {
    return this.getToken(ECMAScriptParser.MoreThan, 0);
};

RelationalExpressionContext.prototype.LessThanEquals = function() {
    return this.getToken(ECMAScriptParser.LessThanEquals, 0);
};

RelationalExpressionContext.prototype.GreaterThanEquals = function() {
    return this.getToken(ECMAScriptParser.GreaterThanEquals, 0);
};
RelationalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitRelationalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostIncrementExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostIncrementExpressionContext.prototype.constructor = PostIncrementExpressionContext;

ECMAScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

PostIncrementExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PostIncrementExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptParser.PlusPlus, 0);
};
PostIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitPostIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function YieldExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
YieldExpressionContext.prototype.constructor = YieldExpressionContext;

ECMAScriptParser.YieldExpressionContext = YieldExpressionContext;

YieldExpressionContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

YieldExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

YieldExpressionContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};
YieldExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitYieldExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitNotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitNotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitNotExpressionContext.prototype.constructor = BitNotExpressionContext;

ECMAScriptParser.BitNotExpressionContext = BitNotExpressionContext;

BitNotExpressionContext.prototype.BitNot = function() {
    return this.getToken(ECMAScriptParser.BitNot, 0);
};

BitNotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
BitNotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NewExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

ECMAScriptParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

NewExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

NewExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
NewExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitNewExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

ECMAScriptParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrayLiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArrayLiteralExpressionContext.prototype.constructor = ArrayLiteralExpressionContext;

ECMAScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

ArrayLiteralExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};
ArrayLiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArrayLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberDotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberDotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberDotExpressionContext.prototype.constructor = MemberDotExpressionContext;

ECMAScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

MemberDotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

MemberDotExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

MemberDotExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

MemberDotExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptParser.QuestionMark, 0);
};

MemberDotExpressionContext.prototype.Hashtag = function() {
    return this.getToken(ECMAScriptParser.Hashtag, 0);
};
MemberDotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitMemberDotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ClassExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClassExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ECMAScriptParser.ClassExpressionContext = ClassExpressionContext;

ClassExpressionContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

ClassExpressionContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ClassExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitClassExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberIndexExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberIndexExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberIndexExpressionContext.prototype.constructor = MemberIndexExpressionContext;

ECMAScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

MemberIndexExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

MemberIndexExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

MemberIndexExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

MemberIndexExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};
MemberIndexExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitMemberIndexExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IdentifierExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

ECMAScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
IdentifierExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitIdentifierExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitAndExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitAndExpressionContext.prototype.constructor = BitAndExpressionContext;

ECMAScriptParser.BitAndExpressionContext = BitAndExpressionContext;

BitAndExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitAndExpressionContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptParser.BitAnd, 0);
};
BitAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBitAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitOrExpressionContext.prototype.constructor = BitOrExpressionContext;

ECMAScriptParser.BitOrExpressionContext = BitOrExpressionContext;

BitOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitOrExpressionContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptParser.BitOr, 0);
};
BitOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBitOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignmentOperatorExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

ECMAScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAssignmentOperatorExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function VoidExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VoidExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
VoidExpressionContext.prototype.constructor = VoidExpressionContext;

ECMAScriptParser.VoidExpressionContext = VoidExpressionContext;

VoidExpressionContext.prototype.Void = function() {
    return this.getToken(ECMAScriptParser.Void, 0);
};

VoidExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
VoidExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitVoidExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoalesceExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoalesceExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
CoalesceExpressionContext.prototype.constructor = CoalesceExpressionContext;

ECMAScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

CoalesceExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

CoalesceExpressionContext.prototype.NullCoalesce = function() {
    return this.getToken(ECMAScriptParser.NullCoalesce, 0);
};
CoalesceExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitCoalesceExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.prototype.singleExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SingleExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 114;
    this.enterRecursionRule(localctx, 114, ECMAScriptParser.RULE_singleExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FunctionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 773;
            this.anoymousFunction();
            break;

        case 2:
            localctx = new ClassExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 774;
            this.match(ECMAScriptParser.Class);
            this.state = 776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
                this.state = 775;
                this.identifier();
            }

            this.state = 778;
            this.classTail();
            break;

        case 3:
            localctx = new MemberNewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 779;
            this.match(ECMAScriptParser.New);
            this.state = 780;
            this.singleExpression(0);
            this.state = 781;
            this.match(ECMAScriptParser.Dot);
            this.state = 782;
            this.identifierName();
            this.state = 783;
            this.arguments();
            break;

        case 4:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 785;
            this.match(ECMAScriptParser.New);
            this.state = 786;
            this.singleExpression(0);
            this.state = 787;
            this.arguments();
            break;

        case 5:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 789;
            this.match(ECMAScriptParser.New);
            this.state = 790;
            this.singleExpression(0);
            this.state = 792;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
            if(la_===1) {
                this.state = 791;
                this.arguments();

            }
            break;

        case 6:
            localctx = new MetaExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 794;
            this.match(ECMAScriptParser.New);
            this.state = 795;
            this.match(ECMAScriptParser.Dot);
            this.state = 796;
            this.identifier();
            break;

        case 7:
            localctx = new DeleteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 797;
            this.match(ECMAScriptParser.Delete);
            this.state = 798;
            this.singleExpression(38);
            break;

        case 8:
            localctx = new VoidExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 799;
            this.match(ECMAScriptParser.Void);
            this.state = 800;
            this.singleExpression(37);
            break;

        case 9:
            localctx = new TypeofExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 801;
            this.match(ECMAScriptParser.Typeof);
            this.state = 802;
            this.singleExpression(36);
            break;

        case 10:
            localctx = new PreIncrementExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 803;
            this.match(ECMAScriptParser.PlusPlus);
            this.state = 804;
            this.singleExpression(35);
            break;

        case 11:
            localctx = new PreDecreaseExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 805;
            this.match(ECMAScriptParser.MinusMinus);
            this.state = 806;
            this.singleExpression(34);
            break;

        case 12:
            localctx = new UnaryPlusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 807;
            this.match(ECMAScriptParser.Plus);
            this.state = 808;
            this.singleExpression(33);
            break;

        case 13:
            localctx = new UnaryMinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 809;
            this.match(ECMAScriptParser.Minus);
            this.state = 810;
            this.singleExpression(32);
            break;

        case 14:
            localctx = new BitNotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 811;
            this.match(ECMAScriptParser.BitNot);
            this.state = 812;
            this.singleExpression(31);
            break;

        case 15:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 813;
            this.match(ECMAScriptParser.Not);
            this.state = 814;
            this.singleExpression(30);
            break;

        case 16:
            localctx = new AwaitExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 815;
            this.match(ECMAScriptParser.Await);
            this.state = 816;
            this.singleExpression(29);
            break;

        case 17:
            localctx = new ImportExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 817;
            this.match(ECMAScriptParser.Import);
            this.state = 818;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 819;
            this.singleExpression(0);
            this.state = 820;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 18:
            localctx = new ThisExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 822;
            this.match(ECMAScriptParser.This);
            break;

        case 19:
            localctx = new YieldExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 823;
            this.match(ECMAScriptParser.Yield);
            this.state = 829;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 824;
                if (!( this.notLineTerminator())) {
                    throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
                }
                this.state = 826;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptParser.Multiply) {
                    this.state = 825;
                    this.match(ECMAScriptParser.Multiply);
                }

                this.state = 828;
                this.expressionSequence();

            }
            break;

        case 20:
            localctx = new IdentifierExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 831;
            this.identifier();
            break;

        case 21:
            localctx = new SuperExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 832;
            this.match(ECMAScriptParser.Super);
            break;

        case 22:
            localctx = new LiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 833;
            this.literal();
            break;

        case 23:
            localctx = new ArrayLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 834;
            this.arrayLiteral();
            break;

        case 24:
            localctx = new ObjectLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 835;
            this.objectLiteral();
            break;

        case 25:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 836;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 837;
            this.expressionSequence();
            this.state = 838;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 26:
            localctx = new InlinedQueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 840;
            this.queryExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 924;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 922;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 843;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 844;
                    this.match(ECMAScriptParser.Power);
                    this.state = 845;
                    this.singleExpression(28);
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 846;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 847;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.Multiply) | (1 << ECMAScriptParser.Divide) | (1 << ECMAScriptParser.Modulus))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 848;
                    this.singleExpression(28);
                    break;

                case 3:
                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 849;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 850;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptParser.Plus || _la===ECMAScriptParser.Minus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 851;
                    this.singleExpression(27);
                    break;

                case 4:
                    localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 852;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 853;
                    this.match(ECMAScriptParser.NullCoalesce);
                    this.state = 854;
                    this.singleExpression(26);
                    break;

                case 5:
                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 855;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 856;
                    _la = this._input.LA(1);
                    if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ECMAScriptParser.RightShiftArithmetic - 30)) | (1 << (ECMAScriptParser.LeftShiftArithmetic - 30)) | (1 << (ECMAScriptParser.RightShiftLogical - 30)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 857;
                    this.singleExpression(25);
                    break;

                case 6:
                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 858;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 859;
                    _la = this._input.LA(1);
                    if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptParser.LessThan - 33)) | (1 << (ECMAScriptParser.MoreThan - 33)) | (1 << (ECMAScriptParser.LessThanEquals - 33)) | (1 << (ECMAScriptParser.GreaterThanEquals - 33)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 860;
                    this.singleExpression(24);
                    break;

                case 7:
                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 861;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 862;
                    this.match(ECMAScriptParser.Instanceof);
                    this.state = 863;
                    this.singleExpression(23);
                    break;

                case 8:
                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 864;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 865;
                    this.match(ECMAScriptParser.In);
                    this.state = 866;
                    this.singleExpression(22);
                    break;

                case 9:
                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 867;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 868;
                    _la = this._input.LA(1);
                    if(!(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ECMAScriptParser.Equals_ - 37)) | (1 << (ECMAScriptParser.NotEquals - 37)) | (1 << (ECMAScriptParser.IdentityEquals - 37)) | (1 << (ECMAScriptParser.IdentityNotEquals - 37)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 869;
                    this.singleExpression(21);
                    break;

                case 10:
                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 870;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 871;
                    this.match(ECMAScriptParser.BitAnd);
                    this.state = 872;
                    this.singleExpression(20);
                    break;

                case 11:
                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 873;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 874;
                    this.match(ECMAScriptParser.BitXOr);
                    this.state = 875;
                    this.singleExpression(19);
                    break;

                case 12:
                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 876;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 877;
                    this.match(ECMAScriptParser.BitOr);
                    this.state = 878;
                    this.singleExpression(18);
                    break;

                case 13:
                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 879;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 880;
                    this.match(ECMAScriptParser.And);
                    this.state = 881;
                    this.singleExpression(17);
                    break;

                case 14:
                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 882;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 883;
                    this.match(ECMAScriptParser.Or);
                    this.state = 884;
                    this.singleExpression(16);
                    break;

                case 15:
                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 885;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 886;
                    this.match(ECMAScriptParser.QuestionMark);
                    this.state = 887;
                    this.singleExpression(0);
                    this.state = 888;
                    this.match(ECMAScriptParser.Colon);
                    this.state = 889;
                    this.singleExpression(15);
                    break;

                case 16:
                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 891;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 892;
                    this.match(ECMAScriptParser.Assign);
                    this.state = 893;
                    this.singleExpression(13);
                    break;

                case 17:
                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 894;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 895;
                    this.assignmentOperator();
                    this.state = 896;
                    this.singleExpression(12);
                    break;

                case 18:
                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 898;
                    if (!( this.precpred(this._ctx, 47))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 47)");
                    }
                    this.state = 899;
                    this.match(ECMAScriptParser.OpenBracket);
                    this.state = 900;
                    this.expressionSequence();
                    this.state = 901;
                    this.match(ECMAScriptParser.CloseBracket);
                    break;

                case 19:
                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 903;
                    if (!( this.precpred(this._ctx, 45))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
                    }
                    this.state = 905;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptParser.QuestionMark) {
                        this.state = 904;
                        this.match(ECMAScriptParser.QuestionMark);
                    }

                    this.state = 907;
                    this.match(ECMAScriptParser.Dot);
                    this.state = 909;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptParser.Hashtag) {
                        this.state = 908;
                        this.match(ECMAScriptParser.Hashtag);
                    }

                    this.state = 911;
                    this.identifierName();
                    break;

                case 20:
                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 912;
                    if (!( this.precpred(this._ctx, 41))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 41)");
                    }
                    this.state = 913;
                    this.arguments();
                    break;

                case 21:
                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 914;
                    if (!( this.precpred(this._ctx, 40))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 40)");
                    }
                    this.state = 915;
                    if (!( this.notLineTerminator())) {
                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
                    }
                    this.state = 916;
                    this.match(ECMAScriptParser.PlusPlus);
                    break;

                case 22:
                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 917;
                    if (!( this.precpred(this._ctx, 39))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
                    }
                    this.state = 918;
                    if (!( this.notLineTerminator())) {
                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
                    }
                    this.state = 919;
                    this.match(ECMAScriptParser.MinusMinus);
                    break;

                case 23:
                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
                    this.state = 920;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 921;
                    this.match(ECMAScriptParser.TemplateStringLiteral);
                    break;

                } 
            }
            this.state = 926;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AssignableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignable;
    return this;
}

AssignableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignableContext.prototype.constructor = AssignableContext;

AssignableContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AssignableContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

AssignableContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

AssignableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAssignable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.AssignableContext = AssignableContext;

ECMAScriptParser.prototype.assignable = function() {

    var localctx = new AssignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ECMAScriptParser.RULE_assignable);
    try {
        this.state = 930;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Async:
        case ECMAScriptParser.NonStrictLet:
        case ECMAScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 927;
            this.identifier();
            break;
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 928;
            this.arrayLiteral();
            break;
        case ECMAScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 3);
            this.state = 929;
            this.objectLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_objectLiteral;
    return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ObjectLiteralContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ObjectLiteralContext.prototype.propertyAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyAssignmentContext);
    } else {
        return this.getTypedRuleContext(PropertyAssignmentContext,i);
    }
};

ObjectLiteralContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ObjectLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitObjectLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ObjectLiteralContext = ObjectLiteralContext;

ECMAScriptParser.prototype.objectLiteral = function() {

    var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ECMAScriptParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 932;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 941;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 933;
            this.propertyAssignment();
            this.state = 938;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 934;
                    this.match(ECMAScriptParser.Comma);
                    this.state = 935;
                    this.propertyAssignment(); 
                }
                this.state = 940;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
            }


        }
        this.state = 944;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Comma) {
            this.state = 943;
            this.match(ECMAScriptParser.Comma);
        }

        this.state = 946;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnoymousFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_anoymousFunction;
    return this;
}

AnoymousFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnoymousFunctionContext.prototype.constructor = AnoymousFunctionContext;


 
AnoymousFunctionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AnoymousFunctionDeclContext(parser, ctx) {
	AnoymousFunctionContext.call(this, parser);
    AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnoymousFunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
AnoymousFunctionDeclContext.prototype.constructor = AnoymousFunctionDeclContext;

ECMAScriptParser.AnoymousFunctionDeclContext = AnoymousFunctionDeclContext;

AnoymousFunctionDeclContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

AnoymousFunctionDeclContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

AnoymousFunctionDeclContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

AnoymousFunctionDeclContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

AnoymousFunctionDeclContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

AnoymousFunctionDeclContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

AnoymousFunctionDeclContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};

AnoymousFunctionDeclContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

AnoymousFunctionDeclContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};
AnoymousFunctionDeclContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAnoymousFunctionDecl(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrowFunctionContext(parser, ctx) {
	AnoymousFunctionContext.call(this, parser);
    AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowFunctionContext.prototype = Object.create(AnoymousFunctionContext.prototype);
ArrowFunctionContext.prototype.constructor = ArrowFunctionContext;

ECMAScriptParser.ArrowFunctionContext = ArrowFunctionContext;

ArrowFunctionContext.prototype.arrowFunctionParameters = function() {
    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
};

ArrowFunctionContext.prototype.ARROW = function() {
    return this.getToken(ECMAScriptParser.ARROW, 0);
};

ArrowFunctionContext.prototype.arrowFunctionBody = function() {
    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
};

ArrowFunctionContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};
ArrowFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArrowFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionDeclContext(parser, ctx) {
	AnoymousFunctionContext.call(this, parser);
    AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
FunctionDeclContext.prototype.constructor = FunctionDeclContext;

ECMAScriptParser.FunctionDeclContext = FunctionDeclContext;

FunctionDeclContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};
FunctionDeclContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitFunctionDecl(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.AnoymousFunctionContext = AnoymousFunctionContext;

ECMAScriptParser.prototype.anoymousFunction = function() {

    var localctx = new AnoymousFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ECMAScriptParser.RULE_anoymousFunction);
    var _la = 0; // Token type
    try {
        this.state = 972;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FunctionDeclContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 948;
            this.functionDeclaration();
            break;

        case 2:
            localctx = new AnoymousFunctionDeclContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Async) {
                this.state = 949;
                this.match(ECMAScriptParser.Async);
            }

            this.state = 952;
            this.match(ECMAScriptParser.Function);
            this.state = 954;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Multiply) {
                this.state = 953;
                this.match(ECMAScriptParser.Multiply);
            }

            this.state = 956;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 958;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
                this.state = 957;
                this.formalParameterList();
            }

            this.state = 960;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 961;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 962;
            this.functionBody();
            this.state = 963;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 3:
            localctx = new ArrowFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 966;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
            if(la_===1) {
                this.state = 965;
                this.match(ECMAScriptParser.Async);

            }
            this.state = 968;
            this.arrowFunctionParameters();
            this.state = 969;
            this.match(ECMAScriptParser.ARROW);
            this.state = 970;
            this.arrowFunctionBody();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrowFunctionParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrowFunctionParameters;
    return this;
}

ArrowFunctionParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionParametersContext.prototype.constructor = ArrowFunctionParametersContext;

ArrowFunctionParametersContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ArrowFunctionParametersContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ArrowFunctionParametersContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ArrowFunctionParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ArrowFunctionParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArrowFunctionParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;

ECMAScriptParser.prototype.arrowFunctionParameters = function() {

    var localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ECMAScriptParser.RULE_arrowFunctionParameters);
    var _la = 0; // Token type
    try {
        this.state = 980;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Async:
        case ECMAScriptParser.NonStrictLet:
        case ECMAScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 974;
            this.identifier();
            break;
        case ECMAScriptParser.OpenParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 975;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 977;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.Ellipsis))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0)) {
                this.state = 976;
                this.formalParameterList();
            }

            this.state = 979;
            this.match(ECMAScriptParser.CloseParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrowFunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrowFunctionBody;
    return this;
}

ArrowFunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionBodyContext.prototype.constructor = ArrowFunctionBodyContext;

ArrowFunctionBodyContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ArrowFunctionBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ArrowFunctionBodyContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ArrowFunctionBodyContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArrowFunctionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitArrowFunctionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;

ECMAScriptParser.prototype.arrowFunctionBody = function() {

    var localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ECMAScriptParser.RULE_arrowFunctionBody);
    try {
        this.state = 987;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 982;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 983;
            this.functionBody();
            this.state = 984;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 986;
            this.singleExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
    return this.getToken(ECMAScriptParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
    return this.getToken(ECMAScriptParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModulusAssign = function() {
    return this.getToken(ECMAScriptParser.ModulusAssign, 0);
};

AssignmentOperatorContext.prototype.PlusAssign = function() {
    return this.getToken(ECMAScriptParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
    return this.getToken(ECMAScriptParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
    return this.getToken(ECMAScriptParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
    return this.getToken(ECMAScriptParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
    return this.getToken(ECMAScriptParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
    return this.getToken(ECMAScriptParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
    return this.getToken(ECMAScriptParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitAssignmentOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;

ECMAScriptParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ECMAScriptParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 989;
        _la = this._input.LA(1);
        if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (ECMAScriptParser.MultiplyAssign - 46)) | (1 << (ECMAScriptParser.DivideAssign - 46)) | (1 << (ECMAScriptParser.ModulusAssign - 46)) | (1 << (ECMAScriptParser.PlusAssign - 46)) | (1 << (ECMAScriptParser.MinusAssign - 46)) | (1 << (ECMAScriptParser.LeftShiftArithmeticAssign - 46)) | (1 << (ECMAScriptParser.RightShiftArithmeticAssign - 46)) | (1 << (ECMAScriptParser.RightShiftLogicalAssign - 46)) | (1 << (ECMAScriptParser.BitAndAssign - 46)) | (1 << (ECMAScriptParser.BitXorAssign - 46)) | (1 << (ECMAScriptParser.BitOrAssign - 46)) | (1 << (ECMAScriptParser.PowerAssign - 46)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

LiteralContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(ECMAScriptParser.TemplateStringLiteral, 0);
};

LiteralContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(ECMAScriptParser.RegularExpressionLiteral, 0);
};

LiteralContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

LiteralContext.prototype.bigintLiteral = function() {
    return this.getTypedRuleContext(BigintLiteralContext,0);
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.LiteralContext = LiteralContext;

ECMAScriptParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ECMAScriptParser.RULE_literal);
    try {
        this.state = 998;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.NullLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 991;
            this.match(ECMAScriptParser.NullLiteral);
            break;
        case ECMAScriptParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 992;
            this.match(ECMAScriptParser.BooleanLiteral);
            break;
        case ECMAScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 993;
            this.match(ECMAScriptParser.StringLiteral);
            break;
        case ECMAScriptParser.TemplateStringLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 994;
            this.match(ECMAScriptParser.TemplateStringLiteral);
            break;
        case ECMAScriptParser.RegularExpressionLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 995;
            this.match(ECMAScriptParser.RegularExpressionLiteral);
            break;
        case ECMAScriptParser.DecimalLiteral:
        case ECMAScriptParser.HexIntegerLiteral:
        case ECMAScriptParser.OctalIntegerLiteral:
        case ECMAScriptParser.OctalIntegerLiteral2:
        case ECMAScriptParser.BinaryIntegerLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 996;
            this.numericLiteral();
            break;
        case ECMAScriptParser.BigHexIntegerLiteral:
        case ECMAScriptParser.BigOctalIntegerLiteral:
        case ECMAScriptParser.BigBinaryIntegerLiteral:
        case ECMAScriptParser.BigDecimalIntegerLiteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 997;
            this.bigintLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumericLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_numericLiteral;
    return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.DecimalLiteral = function() {
    return this.getToken(ECMAScriptParser.DecimalLiteral, 0);
};

NumericLiteralContext.prototype.HexIntegerLiteral = function() {
    return this.getToken(ECMAScriptParser.HexIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral = function() {
    return this.getToken(ECMAScriptParser.OctalIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral2 = function() {
    return this.getToken(ECMAScriptParser.OctalIntegerLiteral2, 0);
};

NumericLiteralContext.prototype.BinaryIntegerLiteral = function() {
    return this.getToken(ECMAScriptParser.BinaryIntegerLiteral, 0);
};

NumericLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitNumericLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.NumericLiteralContext = NumericLiteralContext;

ECMAScriptParser.prototype.numericLiteral = function() {

    var localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ECMAScriptParser.RULE_numericLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1000;
        _la = this._input.LA(1);
        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (ECMAScriptParser.DecimalLiteral - 61)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 61)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 61)) | (1 << (ECMAScriptParser.OctalIntegerLiteral2 - 61)) | (1 << (ECMAScriptParser.BinaryIntegerLiteral - 61)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BigintLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bigintLiteral;
    return this;
}

BigintLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BigintLiteralContext.prototype.constructor = BigintLiteralContext;

BigintLiteralContext.prototype.BigDecimalIntegerLiteral = function() {
    return this.getToken(ECMAScriptParser.BigDecimalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigHexIntegerLiteral = function() {
    return this.getToken(ECMAScriptParser.BigHexIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigOctalIntegerLiteral = function() {
    return this.getToken(ECMAScriptParser.BigOctalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigBinaryIntegerLiteral = function() {
    return this.getToken(ECMAScriptParser.BigBinaryIntegerLiteral, 0);
};

BigintLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitBigintLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.BigintLiteralContext = BigintLiteralContext;

ECMAScriptParser.prototype.bigintLiteral = function() {

    var localctx = new BigintLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ECMAScriptParser.RULE_bigintLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        _la = this._input.LA(1);
        if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ECMAScriptParser.BigHexIntegerLiteral - 66)) | (1 << (ECMAScriptParser.BigOctalIntegerLiteral - 66)) | (1 << (ECMAScriptParser.BigBinaryIntegerLiteral - 66)) | (1 << (ECMAScriptParser.BigDecimalIntegerLiteral - 66)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GetterContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

GetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.GetterContext = GetterContext;

ECMAScriptParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ECMAScriptParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1004;
        if (!( this.n("get"))) {
            throw new antlr4.error.FailedPredicateException(this, "this.n(\"get\")");
        }
        this.state = 1005;
        this.identifier();
        this.state = 1006;
        this.propertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SetterContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

SetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitSetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.SetterContext = SetterContext;

ECMAScriptParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ECMAScriptParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1008;
        if (!( this.n("set"))) {
            throw new antlr4.error.FailedPredicateException(this, "this.n(\"set\")");
        }
        this.state = 1009;
        this.identifier();
        this.state = 1010;
        this.propertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifierName;
    return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.Identifier = function() {
    return this.getToken(ECMAScriptParser.Identifier, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

IdentifierNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitIdentifierName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.IdentifierNameContext = IdentifierNameContext;

ECMAScriptParser.prototype.identifierName = function() {

    var localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ECMAScriptParser.RULE_identifierName);
    try {
        this.state = 1014;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1012;
            this.match(ECMAScriptParser.Identifier);
            break;
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.While:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.This:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.As:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Enum:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Implements:
        case ECMAScriptParser.Private:
        case ECMAScriptParser.Public:
        case ECMAScriptParser.Interface:
        case ECMAScriptParser.Package:
        case ECMAScriptParser.Protected:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 1013;
            this.reservedWord();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(ECMAScriptParser.Identifier, 0);
};

IdentifierContext.prototype.NonStrictLet = function() {
    return this.getToken(ECMAScriptParser.NonStrictLet, 0);
};

IdentifierContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.IdentifierContext = IdentifierContext;

ECMAScriptParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ECMAScriptParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1016;
        _la = this._input.LA(1);
        if(!(((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (ECMAScriptParser.Async - 106)) | (1 << (ECMAScriptParser.NonStrictLet - 106)) | (1 << (ECMAScriptParser.Identifier - 106)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

ReservedWordContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitReservedWord(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.ReservedWordContext = ReservedWordContext;

ECMAScriptParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ECMAScriptParser.RULE_reservedWord);
    try {
        this.state = 1021;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.While:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.This:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.As:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Enum:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Implements:
        case ECMAScriptParser.Private:
        case ECMAScriptParser.Public:
        case ECMAScriptParser.Interface:
        case ECMAScriptParser.Package:
        case ECMAScriptParser.Protected:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Yield:
            this.enterOuterAlt(localctx, 1);
            this.state = 1018;
            this.keyword();
            break;
        case ECMAScriptParser.NullLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 1019;
            this.match(ECMAScriptParser.NullLiteral);
            break;
        case ECMAScriptParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 1020;
            this.match(ECMAScriptParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Break = function() {
    return this.getToken(ECMAScriptParser.Break, 0);
};

KeywordContext.prototype.Do = function() {
    return this.getToken(ECMAScriptParser.Do, 0);
};

KeywordContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptParser.Instanceof, 0);
};

KeywordContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptParser.Typeof, 0);
};

KeywordContext.prototype.Case = function() {
    return this.getToken(ECMAScriptParser.Case, 0);
};

KeywordContext.prototype.Else = function() {
    return this.getToken(ECMAScriptParser.Else, 0);
};

KeywordContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

KeywordContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

KeywordContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptParser.Catch, 0);
};

KeywordContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptParser.Finally, 0);
};

KeywordContext.prototype.Return = function() {
    return this.getToken(ECMAScriptParser.Return, 0);
};

KeywordContext.prototype.Void = function() {
    return this.getToken(ECMAScriptParser.Void, 0);
};

KeywordContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptParser.Continue, 0);
};

KeywordContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

KeywordContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptParser.Switch, 0);
};

KeywordContext.prototype.While = function() {
    return this.getToken(ECMAScriptParser.While, 0);
};

KeywordContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptParser.Debugger, 0);
};

KeywordContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

KeywordContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};

KeywordContext.prototype.With = function() {
    return this.getToken(ECMAScriptParser.With, 0);
};

KeywordContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

KeywordContext.prototype.If = function() {
    return this.getToken(ECMAScriptParser.If, 0);
};

KeywordContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptParser.Throw, 0);
};

KeywordContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptParser.Delete, 0);
};

KeywordContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};

KeywordContext.prototype.Try = function() {
    return this.getToken(ECMAScriptParser.Try, 0);
};

KeywordContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

KeywordContext.prototype.Enum = function() {
    return this.getToken(ECMAScriptParser.Enum, 0);
};

KeywordContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptParser.Extends, 0);
};

KeywordContext.prototype.Super = function() {
    return this.getToken(ECMAScriptParser.Super, 0);
};

KeywordContext.prototype.Const = function() {
    return this.getToken(ECMAScriptParser.Const, 0);
};

KeywordContext.prototype.Export = function() {
    return this.getToken(ECMAScriptParser.Export, 0);
};

KeywordContext.prototype.Import = function() {
    return this.getToken(ECMAScriptParser.Import, 0);
};

KeywordContext.prototype.Implements = function() {
    return this.getToken(ECMAScriptParser.Implements, 0);
};

KeywordContext.prototype.Let = function() {
    return this.getToken(ECMAScriptParser.Let, 0);
};

KeywordContext.prototype.Private = function() {
    return this.getToken(ECMAScriptParser.Private, 0);
};

KeywordContext.prototype.Public = function() {
    return this.getToken(ECMAScriptParser.Public, 0);
};

KeywordContext.prototype.Interface = function() {
    return this.getToken(ECMAScriptParser.Interface, 0);
};

KeywordContext.prototype.Package = function() {
    return this.getToken(ECMAScriptParser.Package, 0);
};

KeywordContext.prototype.Protected = function() {
    return this.getToken(ECMAScriptParser.Protected, 0);
};

KeywordContext.prototype.Static = function() {
    return this.getToken(ECMAScriptParser.Static, 0);
};

KeywordContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

KeywordContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};

KeywordContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

KeywordContext.prototype.From = function() {
    return this.getToken(ECMAScriptParser.From, 0);
};

KeywordContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

KeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.KeywordContext = KeywordContext;

ECMAScriptParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ECMAScriptParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1023;
        _la = this._input.LA(1);
        if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptParser.Break - 70)) | (1 << (ECMAScriptParser.Do - 70)) | (1 << (ECMAScriptParser.Instanceof - 70)) | (1 << (ECMAScriptParser.Typeof - 70)) | (1 << (ECMAScriptParser.Case - 70)) | (1 << (ECMAScriptParser.Else - 70)) | (1 << (ECMAScriptParser.New - 70)) | (1 << (ECMAScriptParser.Var - 70)) | (1 << (ECMAScriptParser.Catch - 70)) | (1 << (ECMAScriptParser.Finally - 70)) | (1 << (ECMAScriptParser.Return - 70)) | (1 << (ECMAScriptParser.Void - 70)) | (1 << (ECMAScriptParser.Continue - 70)) | (1 << (ECMAScriptParser.For - 70)) | (1 << (ECMAScriptParser.Switch - 70)) | (1 << (ECMAScriptParser.While - 70)) | (1 << (ECMAScriptParser.Debugger - 70)) | (1 << (ECMAScriptParser.Function - 70)) | (1 << (ECMAScriptParser.This - 70)) | (1 << (ECMAScriptParser.With - 70)) | (1 << (ECMAScriptParser.Default - 70)) | (1 << (ECMAScriptParser.If - 70)) | (1 << (ECMAScriptParser.Throw - 70)) | (1 << (ECMAScriptParser.Delete - 70)) | (1 << (ECMAScriptParser.In - 70)) | (1 << (ECMAScriptParser.Try - 70)) | (1 << (ECMAScriptParser.As - 70)) | (1 << (ECMAScriptParser.From - 70)) | (1 << (ECMAScriptParser.Let - 70)) | (1 << (ECMAScriptParser.Class - 70)) | (1 << (ECMAScriptParser.Enum - 70)) | (1 << (ECMAScriptParser.Extends - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (ECMAScriptParser.Super - 102)) | (1 << (ECMAScriptParser.Const - 102)) | (1 << (ECMAScriptParser.Export - 102)) | (1 << (ECMAScriptParser.Import - 102)) | (1 << (ECMAScriptParser.Async - 102)) | (1 << (ECMAScriptParser.Await - 102)) | (1 << (ECMAScriptParser.Implements - 102)) | (1 << (ECMAScriptParser.Private - 102)) | (1 << (ECMAScriptParser.Public - 102)) | (1 << (ECMAScriptParser.Interface - 102)) | (1 << (ECMAScriptParser.Package - 102)) | (1 << (ECMAScriptParser.Protected - 102)) | (1 << (ECMAScriptParser.Static - 102)) | (1 << (ECMAScriptParser.Yield - 102)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

EosContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptParser.EOF, 0);
};

EosContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitEos(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.EosContext = EosContext;

ECMAScriptParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ECMAScriptParser.RULE_eos);
    try {
        this.state = 1029;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1025;
            this.match(ECMAScriptParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1026;
            this.match(ECMAScriptParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1027;
            if (!( this.lineTerminatorAhead())) {
                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1028;
            if (!( this.closeBrace())) {
                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySelectStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_querySelectStatement;
    return this;
}

QuerySelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySelectStatementContext.prototype.constructor = QuerySelectStatementContext;

QuerySelectStatementContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QuerySelectStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQuerySelectStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.QuerySelectStatementContext = QuerySelectStatementContext;

ECMAScriptParser.prototype.querySelectStatement = function() {

    var localctx = new QuerySelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ECMAScriptParser.RULE_querySelectStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1031;
        this.queryExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_queryExpression;
    return this;
}

QueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionContext.prototype.constructor = QueryExpressionContext;

QueryExpressionContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

QueryExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

QueryExpressionContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

QueryExpressionContext.prototype.sql_union = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_unionContext);
    } else {
        return this.getTypedRuleContext(Sql_unionContext,i);
    }
};

QueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.QueryExpressionContext = QueryExpressionContext;

ECMAScriptParser.prototype.queryExpression = function() {

    var localctx = new QueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ECMAScriptParser.RULE_queryExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1038;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Select:
        case ECMAScriptParser.Using:
            this.state = 1033;
            this.querySpecification();
            break;
        case ECMAScriptParser.OpenParen:
            this.state = 1034;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1035;
            this.queryExpression();
            this.state = 1036;
            this.match(ECMAScriptParser.CloseParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1043;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1040;
                this.sql_union(); 
            }
            this.state = 1045;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sql_unionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_sql_union;
    return this;
}

Sql_unionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_unionContext.prototype.constructor = Sql_unionContext;


 
Sql_unionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryUnionExpressionContext(parser, ctx) {
	Sql_unionContext.call(this, parser);
    Sql_unionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryUnionExpressionContext.prototype = Object.create(Sql_unionContext.prototype);
QueryUnionExpressionContext.prototype.constructor = QueryUnionExpressionContext;

ECMAScriptParser.QueryUnionExpressionContext = QueryUnionExpressionContext;

QueryUnionExpressionContext.prototype.Union = function() {
    return this.getToken(ECMAScriptParser.Union, 0);
};

QueryUnionExpressionContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

QueryUnionExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

QueryUnionExpressionContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryUnionExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

QueryUnionExpressionContext.prototype.All = function() {
    return this.getToken(ECMAScriptParser.All, 0);
};
QueryUnionExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryUnionExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Sql_unionContext = Sql_unionContext;

ECMAScriptParser.prototype.sql_union = function() {

    var localctx = new Sql_unionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ECMAScriptParser.RULE_sql_union);
    var _la = 0; // Token type
    try {
        localctx = new QueryUnionExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1046;
        this.match(ECMAScriptParser.Union);
        this.state = 1048;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.All) {
            this.state = 1047;
            this.match(ECMAScriptParser.All);
        }

        this.state = 1055;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Select:
        case ECMAScriptParser.Using:
            this.state = 1050;
            this.querySpecification();
            break;
        case ECMAScriptParser.OpenParen:
            this.state = 1051;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1052;
            this.queryExpression();
            this.state = 1053;
            this.match(ECMAScriptParser.CloseParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_querySpecification;
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;


 
QuerySpecificationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QuerySelectExpressionContext(parser, ctx) {
	QuerySpecificationContext.call(this, parser);
    QuerySpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuerySelectExpressionContext.prototype = Object.create(QuerySpecificationContext.prototype);
QuerySelectExpressionContext.prototype.constructor = QuerySelectExpressionContext;

ECMAScriptParser.QuerySelectExpressionContext = QuerySelectExpressionContext;

QuerySelectExpressionContext.prototype.Select = function() {
    return this.getToken(ECMAScriptParser.Select, 0);
};

QuerySelectExpressionContext.prototype.select_list = function() {
    return this.getTypedRuleContext(Select_listContext,0);
};

QuerySelectExpressionContext.prototype.bind_clause = function() {
    return this.getTypedRuleContext(Bind_clauseContext,0);
};

QuerySelectExpressionContext.prototype.withinClause = function() {
    return this.getTypedRuleContext(WithinClauseContext,0);
};

QuerySelectExpressionContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

QuerySelectExpressionContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

QuerySelectExpressionContext.prototype.produce_clause = function() {
    return this.getTypedRuleContext(Produce_clauseContext,0);
};
QuerySelectExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQuerySelectExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.QuerySpecificationContext = QuerySpecificationContext;

ECMAScriptParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ECMAScriptParser.RULE_querySpecification);
    var _la = 0; // Token type
    try {
        localctx = new QuerySelectExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1058;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Using) {
            this.state = 1057;
            this.bind_clause();
        }

        this.state = 1060;
        this.match(ECMAScriptParser.Select);
        this.state = 1061;
        this.select_list();
        this.state = 1063;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        if(la_===1) {
            this.state = 1062;
            this.withinClause();

        }
        this.state = 1066;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        if(la_===1) {
            this.state = 1065;
            this.fromClause();

        }
        this.state = 1069;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        if(la_===1) {
            this.state = 1068;
            this.whereClause();

        }
        this.state = 1072;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        if(la_===1) {
            this.state = 1071;
            this.produce_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Select_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_select_list;
    return this;
}

Select_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_listContext.prototype.constructor = Select_listContext;


 
Select_listContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QuerySelectListExpressionContext(parser, ctx) {
	Select_listContext.call(this, parser);
    Select_listContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuerySelectListExpressionContext.prototype = Object.create(Select_listContext.prototype);
QuerySelectListExpressionContext.prototype.constructor = QuerySelectListExpressionContext;

ECMAScriptParser.QuerySelectListExpressionContext = QuerySelectListExpressionContext;

QuerySelectListExpressionContext.prototype.select_list_elem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_list_elemContext);
    } else {
        return this.getTypedRuleContext(Select_list_elemContext,i);
    }
};

QuerySelectListExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};

QuerySelectListExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQuerySelectListExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Select_listContext = Select_listContext;

ECMAScriptParser.prototype.select_list = function() {

    var localctx = new Select_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ECMAScriptParser.RULE_select_list);
    try {
        localctx = new QuerySelectListExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1074;
        this.select_list_elem();
        this.state = 1079;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1075;
                this.match(ECMAScriptParser.Comma);
                this.state = 1076;
                this.select_list_elem(); 
            }
            this.state = 1081;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Select_list_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_select_list_elem;
    return this;
}

Select_list_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_list_elemContext.prototype.constructor = Select_list_elemContext;

Select_list_elemContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

Select_list_elemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Select_list_elemContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

Select_list_elemContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

Select_list_elemContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

Select_list_elemContext.prototype.argument = function() {
    return this.getTypedRuleContext(ArgumentContext,0);
};

Select_list_elemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitSelect_list_elem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.Select_list_elemContext = Select_list_elemContext;

ECMAScriptParser.prototype.select_list_elem = function() {

    var localctx = new Select_list_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ECMAScriptParser.RULE_select_list_elem);
    try {
        this.state = 1094;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1082;
            this.match(ECMAScriptParser.Multiply);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1083;
            this.identifier();
            this.state = 1086;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
            if(la_===1) {
                this.state = 1084;
                this.match(ECMAScriptParser.As);
                this.state = 1085;
                this.identifierName();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1088;
            this.singleExpression(0);
            this.state = 1089;
            this.argument();
            this.state = 1092;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
            if(la_===1) {
                this.state = 1090;
                this.match(ECMAScriptParser.As);
                this.state = 1091;
                this.identifierName();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;


 
FromClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryFromExpressionContext(parser, ctx) {
	FromClauseContext.call(this, parser);
    FromClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryFromExpressionContext.prototype = Object.create(FromClauseContext.prototype);
QueryFromExpressionContext.prototype.constructor = QueryFromExpressionContext;

ECMAScriptParser.QueryFromExpressionContext = QueryFromExpressionContext;

QueryFromExpressionContext.prototype.From = function() {
    return this.getToken(ECMAScriptParser.From, 0);
};

QueryFromExpressionContext.prototype.dataSources = function() {
    return this.getTypedRuleContext(DataSourcesContext,0);
};
QueryFromExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryFromExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.FromClauseContext = FromClauseContext;

ECMAScriptParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ECMAScriptParser.RULE_fromClause);
    try {
        localctx = new QueryFromExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1096;
        this.match(ECMAScriptParser.From);
        this.state = 1097;
        this.dataSources();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;


 
WhereClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryWhereExpressionContext(parser, ctx) {
	WhereClauseContext.call(this, parser);
    WhereClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryWhereExpressionContext.prototype = Object.create(WhereClauseContext.prototype);
QueryWhereExpressionContext.prototype.constructor = QueryWhereExpressionContext;

ECMAScriptParser.QueryWhereExpressionContext = QueryWhereExpressionContext;

QueryWhereExpressionContext.prototype.Where = function() {
    return this.getToken(ECMAScriptParser.Where, 0);
};

QueryWhereExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};
QueryWhereExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryWhereExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.WhereClauseContext = WhereClauseContext;

ECMAScriptParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ECMAScriptParser.RULE_whereClause);
    try {
        localctx = new QueryWhereExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1099;
        this.match(ECMAScriptParser.Where);
        this.state = 1100;
        this.expressionSequence();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataSourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_dataSources;
    return this;
}

DataSourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataSourcesContext.prototype.constructor = DataSourcesContext;


 
DataSourcesContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryDataSourcesExpressionContext(parser, ctx) {
	DataSourcesContext.call(this, parser);
    DataSourcesContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryDataSourcesExpressionContext.prototype = Object.create(DataSourcesContext.prototype);
QueryDataSourcesExpressionContext.prototype.constructor = QueryDataSourcesExpressionContext;

ECMAScriptParser.QueryDataSourcesExpressionContext = QueryDataSourcesExpressionContext;

QueryDataSourcesExpressionContext.prototype.dataSource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataSourceContext);
    } else {
        return this.getTypedRuleContext(DataSourceContext,i);
    }
};

QueryDataSourcesExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};

QueryDataSourcesExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryDataSourcesExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.DataSourcesContext = DataSourcesContext;

ECMAScriptParser.prototype.dataSources = function() {

    var localctx = new DataSourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ECMAScriptParser.RULE_dataSources);
    try {
        localctx = new QueryDataSourcesExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1102;
        this.dataSource();
        this.state = 1107;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1103;
                this.match(ECMAScriptParser.Comma);
                this.state = 1104;
                this.dataSource(); 
            }
            this.state = 1109;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataSourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_dataSource;
    return this;
}

DataSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataSourceContext.prototype.constructor = DataSourceContext;

DataSourceContext.prototype.data_source_item_joined = function() {
    return this.getTypedRuleContext(Data_source_item_joinedContext,0);
};

DataSourceContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

DataSourceContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

DataSourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitDataSource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.DataSourceContext = DataSourceContext;

ECMAScriptParser.prototype.dataSource = function() {

    var localctx = new DataSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ECMAScriptParser.RULE_dataSource);
    try {
        this.state = 1115;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1110;
            this.data_source_item_joined();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1111;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1112;
            this.data_source_item_joined();
            this.state = 1113;
            this.match(ECMAScriptParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Data_source_item_joinedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_data_source_item_joined;
    return this;
}

Data_source_item_joinedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_source_item_joinedContext.prototype.constructor = Data_source_item_joinedContext;


 
Data_source_item_joinedContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryDataSourceExpressionContext(parser, ctx) {
	Data_source_item_joinedContext.call(this, parser);
    Data_source_item_joinedContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryDataSourceExpressionContext.prototype = Object.create(Data_source_item_joinedContext.prototype);
QueryDataSourceExpressionContext.prototype.constructor = QueryDataSourceExpressionContext;

ECMAScriptParser.QueryDataSourceExpressionContext = QueryDataSourceExpressionContext;

QueryDataSourceExpressionContext.prototype.data_source_item = function() {
    return this.getTypedRuleContext(Data_source_itemContext,0);
};

QueryDataSourceExpressionContext.prototype.using_source_clause = function() {
    return this.getTypedRuleContext(Using_source_clauseContext,0);
};

QueryDataSourceExpressionContext.prototype.join_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_clauseContext);
    } else {
        return this.getTypedRuleContext(Join_clauseContext,i);
    }
};
QueryDataSourceExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryDataSourceExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Data_source_item_joinedContext = Data_source_item_joinedContext;

ECMAScriptParser.prototype.data_source_item_joined = function() {

    var localctx = new Data_source_item_joinedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ECMAScriptParser.RULE_data_source_item_joined);
    try {
        localctx = new QueryDataSourceExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1117;
        this.data_source_item();
        this.state = 1119;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        if(la_===1) {
            this.state = 1118;
            this.using_source_clause();

        }
        this.state = 1124;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1121;
                this.join_clause(); 
            }
            this.state = 1126;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Data_source_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_data_source_item;
    return this;
}

Data_source_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_source_itemContext.prototype.constructor = Data_source_itemContext;


 
Data_source_itemContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryDataSourceItemIdentifierExpressionContext(parser, ctx) {
	Data_source_itemContext.call(this, parser);
    Data_source_itemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryDataSourceItemIdentifierExpressionContext.prototype = Object.create(Data_source_itemContext.prototype);
QueryDataSourceItemIdentifierExpressionContext.prototype.constructor = QueryDataSourceItemIdentifierExpressionContext;

ECMAScriptParser.QueryDataSourceItemIdentifierExpressionContext = QueryDataSourceItemIdentifierExpressionContext;

QueryDataSourceItemIdentifierExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
QueryDataSourceItemIdentifierExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryDataSourceItemIdentifierExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryDataSourceItemUrlExpressionContext(parser, ctx) {
	Data_source_itemContext.call(this, parser);
    Data_source_itemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryDataSourceItemUrlExpressionContext.prototype = Object.create(Data_source_itemContext.prototype);
QueryDataSourceItemUrlExpressionContext.prototype.constructor = QueryDataSourceItemUrlExpressionContext;

ECMAScriptParser.QueryDataSourceItemUrlExpressionContext = QueryDataSourceItemUrlExpressionContext;

QueryDataSourceItemUrlExpressionContext.prototype.Url = function() {
    return this.getToken(ECMAScriptParser.Url, 0);
};
QueryDataSourceItemUrlExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryDataSourceItemUrlExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryDataSourceItemArgumentsExpressionContext(parser, ctx) {
	Data_source_itemContext.call(this, parser);
    Data_source_itemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryDataSourceItemArgumentsExpressionContext.prototype = Object.create(Data_source_itemContext.prototype);
QueryDataSourceItemArgumentsExpressionContext.prototype.constructor = QueryDataSourceItemArgumentsExpressionContext;

ECMAScriptParser.QueryDataSourceItemArgumentsExpressionContext = QueryDataSourceItemArgumentsExpressionContext;

QueryDataSourceItemArgumentsExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

QueryDataSourceItemArgumentsExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
QueryDataSourceItemArgumentsExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryDataSourceItemArgumentsExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryDataSourceItemSubqueryExpressionContext(parser, ctx) {
	Data_source_itemContext.call(this, parser);
    Data_source_itemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryDataSourceItemSubqueryExpressionContext.prototype = Object.create(Data_source_itemContext.prototype);
QueryDataSourceItemSubqueryExpressionContext.prototype.constructor = QueryDataSourceItemSubqueryExpressionContext;

ECMAScriptParser.QueryDataSourceItemSubqueryExpressionContext = QueryDataSourceItemSubqueryExpressionContext;

QueryDataSourceItemSubqueryExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

QueryDataSourceItemSubqueryExpressionContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryDataSourceItemSubqueryExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};
QueryDataSourceItemSubqueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryDataSourceItemSubqueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Data_source_itemContext = Data_source_itemContext;

ECMAScriptParser.prototype.data_source_item = function() {

    var localctx = new Data_source_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ECMAScriptParser.RULE_data_source_item);
    try {
        this.state = 1136;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        switch(la_) {
        case 1:
            localctx = new QueryDataSourceItemUrlExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1127;
            this.match(ECMAScriptParser.Url);
            break;

        case 2:
            localctx = new QueryDataSourceItemArgumentsExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1128;
            this.singleExpression(0);
            this.state = 1129;
            this.arguments();
            break;

        case 3:
            localctx = new QueryDataSourceItemIdentifierExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1131;
            this.identifier();
            break;

        case 4:
            localctx = new QueryDataSourceItemSubqueryExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1132;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1133;
            this.queryExpression();
            this.state = 1134;
            this.match(ECMAScriptParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Join_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_join_clause;
    return this;
}

Join_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_clauseContext.prototype.constructor = Join_clauseContext;


 
Join_clauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryJoinCrossApplyExpressionContext(parser, ctx) {
	Join_clauseContext.call(this, parser);
    Join_clauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryJoinCrossApplyExpressionContext.prototype = Object.create(Join_clauseContext.prototype);
QueryJoinCrossApplyExpressionContext.prototype.constructor = QueryJoinCrossApplyExpressionContext;

ECMAScriptParser.QueryJoinCrossApplyExpressionContext = QueryJoinCrossApplyExpressionContext;

QueryJoinCrossApplyExpressionContext.prototype.Join = function() {
    return this.getToken(ECMAScriptParser.Join, 0);
};

QueryJoinCrossApplyExpressionContext.prototype.dataSources = function() {
    return this.getTypedRuleContext(DataSourcesContext,0);
};
QueryJoinCrossApplyExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryJoinCrossApplyExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryJoinOnExpressionContext(parser, ctx) {
	Join_clauseContext.call(this, parser);
    Join_clauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryJoinOnExpressionContext.prototype = Object.create(Join_clauseContext.prototype);
QueryJoinOnExpressionContext.prototype.constructor = QueryJoinOnExpressionContext;

ECMAScriptParser.QueryJoinOnExpressionContext = QueryJoinOnExpressionContext;

QueryJoinOnExpressionContext.prototype.Join = function() {
    return this.getToken(ECMAScriptParser.Join, 0);
};

QueryJoinOnExpressionContext.prototype.dataSources = function() {
    return this.getTypedRuleContext(DataSourcesContext,0);
};

QueryJoinOnExpressionContext.prototype.On = function() {
    return this.getToken(ECMAScriptParser.On, 0);
};

QueryJoinOnExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

QueryJoinOnExpressionContext.prototype.Equals_ = function() {
    return this.getToken(ECMAScriptParser.Equals_, 0);
};

QueryJoinOnExpressionContext.prototype.IdentityEquals = function() {
    return this.getToken(ECMAScriptParser.IdentityEquals, 0);
};
QueryJoinOnExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryJoinOnExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Join_clauseContext = Join_clauseContext;

ECMAScriptParser.prototype.join_clause = function() {

    var localctx = new Join_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ECMAScriptParser.RULE_join_clause);
    var _la = 0; // Token type
    try {
        this.state = 1147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            localctx = new QueryJoinCrossApplyExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1138;
            this.match(ECMAScriptParser.Join);
            this.state = 1139;
            this.dataSources();
            break;

        case 2:
            localctx = new QueryJoinOnExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1140;
            this.match(ECMAScriptParser.Join);
            this.state = 1141;
            this.dataSources();
            this.state = 1142;
            this.match(ECMAScriptParser.On);
            this.state = 1143;
            this.singleExpression(0);
            this.state = 1144;
            _la = this._input.LA(1);
            if(!(_la===ECMAScriptParser.Equals_ || _la===ECMAScriptParser.IdentityEquals)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1145;
            this.singleExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Using_source_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_using_source_clause;
    return this;
}

Using_source_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_source_clauseContext.prototype.constructor = Using_source_clauseContext;


 
Using_source_clauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QuerySourceUsingLiteralExpressionContext(parser, ctx) {
	Using_source_clauseContext.call(this, parser);
    Using_source_clauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuerySourceUsingLiteralExpressionContext.prototype = Object.create(Using_source_clauseContext.prototype);
QuerySourceUsingLiteralExpressionContext.prototype.constructor = QuerySourceUsingLiteralExpressionContext;

ECMAScriptParser.QuerySourceUsingLiteralExpressionContext = QuerySourceUsingLiteralExpressionContext;

QuerySourceUsingLiteralExpressionContext.prototype.Using = function() {
    return this.getToken(ECMAScriptParser.Using, 0);
};

QuerySourceUsingLiteralExpressionContext.prototype.queryObjectLiteral = function() {
    return this.getTypedRuleContext(QueryObjectLiteralContext,0);
};
QuerySourceUsingLiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQuerySourceUsingLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QuerySourceUsingSingleExpressionContext(parser, ctx) {
	Using_source_clauseContext.call(this, parser);
    Using_source_clauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuerySourceUsingSingleExpressionContext.prototype = Object.create(Using_source_clauseContext.prototype);
QuerySourceUsingSingleExpressionContext.prototype.constructor = QuerySourceUsingSingleExpressionContext;

ECMAScriptParser.QuerySourceUsingSingleExpressionContext = QuerySourceUsingSingleExpressionContext;

QuerySourceUsingSingleExpressionContext.prototype.Using = function() {
    return this.getToken(ECMAScriptParser.Using, 0);
};

QuerySourceUsingSingleExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
QuerySourceUsingSingleExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQuerySourceUsingSingleExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Using_source_clauseContext = Using_source_clauseContext;

ECMAScriptParser.prototype.using_source_clause = function() {

    var localctx = new Using_source_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ECMAScriptParser.RULE_using_source_clause);
    try {
        this.state = 1153;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            localctx = new QuerySourceUsingLiteralExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1149;
            this.match(ECMAScriptParser.Using);
            this.state = 1150;
            this.queryObjectLiteral();
            break;

        case 2:
            localctx = new QuerySourceUsingSingleExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1151;
            this.match(ECMAScriptParser.Using);
            this.state = 1152;
            this.singleExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Produce_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_produce_clause;
    return this;
}

Produce_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Produce_clauseContext.prototype.constructor = Produce_clauseContext;


 
Produce_clauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryProduceExpressionContext(parser, ctx) {
	Produce_clauseContext.call(this, parser);
    Produce_clauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryProduceExpressionContext.prototype = Object.create(Produce_clauseContext.prototype);
QueryProduceExpressionContext.prototype.constructor = QueryProduceExpressionContext;

ECMAScriptParser.QueryProduceExpressionContext = QueryProduceExpressionContext;

QueryProduceExpressionContext.prototype.Produce = function() {
    return this.getToken(ECMAScriptParser.Produce, 0);
};

QueryProduceExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
QueryProduceExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryProduceExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Produce_clauseContext = Produce_clauseContext;

ECMAScriptParser.prototype.produce_clause = function() {

    var localctx = new Produce_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ECMAScriptParser.RULE_produce_clause);
    try {
        localctx = new QueryProduceExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1155;
        this.match(ECMAScriptParser.Produce);
        this.state = 1156;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Bind_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bind_clause;
    return this;
}

Bind_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bind_clauseContext.prototype.constructor = Bind_clauseContext;


 
Bind_clauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryBindExpressionContext(parser, ctx) {
	Bind_clauseContext.call(this, parser);
    Bind_clauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryBindExpressionContext.prototype = Object.create(Bind_clauseContext.prototype);
QueryBindExpressionContext.prototype.constructor = QueryBindExpressionContext;

ECMAScriptParser.QueryBindExpressionContext = QueryBindExpressionContext;

QueryBindExpressionContext.prototype.Using = function() {
    return this.getToken(ECMAScriptParser.Using, 0);
};

QueryBindExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
QueryBindExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryBindExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.Bind_clauseContext = Bind_clauseContext;

ECMAScriptParser.prototype.bind_clause = function() {

    var localctx = new Bind_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ECMAScriptParser.RULE_bind_clause);
    try {
        localctx = new QueryBindExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1158;
        this.match(ECMAScriptParser.Using);
        this.state = 1159;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithinClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_withinClause;
    return this;
}

WithinClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithinClauseContext.prototype.constructor = WithinClauseContext;


 
WithinClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryWithinExpressionContext(parser, ctx) {
	WithinClauseContext.call(this, parser);
    WithinClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryWithinExpressionContext.prototype = Object.create(WithinClauseContext.prototype);
QueryWithinExpressionContext.prototype.constructor = QueryWithinExpressionContext;

ECMAScriptParser.QueryWithinExpressionContext = QueryWithinExpressionContext;

QueryWithinExpressionContext.prototype.Within = function() {
    return this.getToken(ECMAScriptParser.Within, 0);
};

QueryWithinExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

QueryWithinExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};

QueryWithinExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryWithinExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ECMAScriptParser.WithinClauseContext = WithinClauseContext;

ECMAScriptParser.prototype.withinClause = function() {

    var localctx = new WithinClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ECMAScriptParser.RULE_withinClause);
    try {
        localctx = new QueryWithinExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1161;
        this.match(ECMAScriptParser.Within);
        this.state = 1162;
        this.singleExpression(0);
        this.state = 1167;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1163;
                this.match(ECMAScriptParser.Comma);
                this.state = 1164;
                this.singleExpression(0); 
            }
            this.state = 1169;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_queryObjectLiteral;
    return this;
}

QueryObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryObjectLiteralContext.prototype.constructor = QueryObjectLiteralContext;

QueryObjectLiteralContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

QueryObjectLiteralContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

QueryObjectLiteralContext.prototype.queryPropertyAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryPropertyAssignmentContext);
    } else {
        return this.getTypedRuleContext(QueryPropertyAssignmentContext,i);
    }
};

QueryObjectLiteralContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


QueryObjectLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryObjectLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.QueryObjectLiteralContext = QueryObjectLiteralContext;

ECMAScriptParser.prototype.queryObjectLiteral = function() {

    var localctx = new QueryObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ECMAScriptParser.RULE_queryObjectLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1170;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1179;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.OpenBracket || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ECMAScriptParser.NullLiteral - 59)) | (1 << (ECMAScriptParser.BooleanLiteral - 59)) | (1 << (ECMAScriptParser.DecimalLiteral - 59)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 59)) | (1 << (ECMAScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (ECMAScriptParser.BinaryIntegerLiteral - 59)) | (1 << (ECMAScriptParser.Break - 59)) | (1 << (ECMAScriptParser.Do - 59)) | (1 << (ECMAScriptParser.Instanceof - 59)) | (1 << (ECMAScriptParser.Typeof - 59)) | (1 << (ECMAScriptParser.Case - 59)) | (1 << (ECMAScriptParser.Else - 59)) | (1 << (ECMAScriptParser.New - 59)) | (1 << (ECMAScriptParser.Var - 59)) | (1 << (ECMAScriptParser.Catch - 59)) | (1 << (ECMAScriptParser.Finally - 59)) | (1 << (ECMAScriptParser.Return - 59)) | (1 << (ECMAScriptParser.Void - 59)) | (1 << (ECMAScriptParser.Continue - 59)) | (1 << (ECMAScriptParser.For - 59)) | (1 << (ECMAScriptParser.Switch - 59)) | (1 << (ECMAScriptParser.While - 59)) | (1 << (ECMAScriptParser.Debugger - 59)) | (1 << (ECMAScriptParser.Function - 59)) | (1 << (ECMAScriptParser.This - 59)) | (1 << (ECMAScriptParser.With - 59)) | (1 << (ECMAScriptParser.Default - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ECMAScriptParser.If - 91)) | (1 << (ECMAScriptParser.Throw - 91)) | (1 << (ECMAScriptParser.Delete - 91)) | (1 << (ECMAScriptParser.In - 91)) | (1 << (ECMAScriptParser.Try - 91)) | (1 << (ECMAScriptParser.As - 91)) | (1 << (ECMAScriptParser.From - 91)) | (1 << (ECMAScriptParser.Let - 91)) | (1 << (ECMAScriptParser.Class - 91)) | (1 << (ECMAScriptParser.Enum - 91)) | (1 << (ECMAScriptParser.Extends - 91)) | (1 << (ECMAScriptParser.Super - 91)) | (1 << (ECMAScriptParser.Const - 91)) | (1 << (ECMAScriptParser.Export - 91)) | (1 << (ECMAScriptParser.Import - 91)) | (1 << (ECMAScriptParser.Async - 91)) | (1 << (ECMAScriptParser.Await - 91)) | (1 << (ECMAScriptParser.Implements - 91)) | (1 << (ECMAScriptParser.Private - 91)) | (1 << (ECMAScriptParser.Public - 91)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (ECMAScriptParser.Interface - 123)) | (1 << (ECMAScriptParser.Package - 123)) | (1 << (ECMAScriptParser.Protected - 123)) | (1 << (ECMAScriptParser.Static - 123)) | (1 << (ECMAScriptParser.Yield - 123)) | (1 << (ECMAScriptParser.Identifier - 123)) | (1 << (ECMAScriptParser.StringLiteral - 123)))) !== 0)) {
            this.state = 1171;
            this.queryPropertyAssignment();
            this.state = 1176;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1172;
                    this.match(ECMAScriptParser.Comma);
                    this.state = 1173;
                    this.queryPropertyAssignment(); 
                }
                this.state = 1178;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
            }

        }

        this.state = 1182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Comma) {
            this.state = 1181;
            this.match(ECMAScriptParser.Comma);
        }

        this.state = 1184;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryPropertyAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_queryPropertyAssignment;
    return this;
}

QueryPropertyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPropertyAssignmentContext.prototype.constructor = QueryPropertyAssignmentContext;

QueryPropertyAssignmentContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

QueryPropertyAssignmentContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

QueryPropertyAssignmentContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

QueryPropertyAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ECMAScriptParserVisitor ) {
        return visitor.visitQueryPropertyAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ECMAScriptParser.QueryPropertyAssignmentContext = QueryPropertyAssignmentContext;

ECMAScriptParser.prototype.queryPropertyAssignment = function() {

    var localctx = new QueryPropertyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ECMAScriptParser.RULE_queryPropertyAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1186;
        this.propertyName();
        this.state = 1187;
        this.match(ECMAScriptParser.Colon);
        this.state = 1188;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ECMAScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 19:
			return this.expressionStatement_sempred(localctx, predIndex);
	case 21:
			return this.iterationStatement_sempred(localctx, predIndex);
	case 23:
			return this.continueStatement_sempred(localctx, predIndex);
	case 24:
			return this.breakStatement_sempred(localctx, predIndex);
	case 25:
			return this.returnStatement_sempred(localctx, predIndex);
	case 33:
			return this.throwStatement_sempred(localctx, predIndex);
	case 42:
			return this.classElement_sempred(localctx, predIndex);
	case 57:
			return this.singleExpression_sempred(localctx, predIndex);
	case 67:
			return this.getter_sempred(localctx, predIndex);
	case 68:
			return this.setter_sempred(localctx, predIndex);
	case 73:
			return this.eos_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ECMAScriptParser.prototype.expressionStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.notOpenBraceAndNotFunction();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.iterationStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.p("of");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.continueStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.breakStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.returnStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.throwStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.classElement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.n("static");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.singleExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.notLineTerminator();
		case 8:
			return this.precpred(this._ctx, 28);
		case 9:
			return this.precpred(this._ctx, 27);
		case 10:
			return this.precpred(this._ctx, 26);
		case 11:
			return this.precpred(this._ctx, 25);
		case 12:
			return this.precpred(this._ctx, 24);
		case 13:
			return this.precpred(this._ctx, 23);
		case 14:
			return this.precpred(this._ctx, 22);
		case 15:
			return this.precpred(this._ctx, 21);
		case 16:
			return this.precpred(this._ctx, 20);
		case 17:
			return this.precpred(this._ctx, 19);
		case 18:
			return this.precpred(this._ctx, 18);
		case 19:
			return this.precpred(this._ctx, 17);
		case 20:
			return this.precpred(this._ctx, 16);
		case 21:
			return this.precpred(this._ctx, 15);
		case 22:
			return this.precpred(this._ctx, 14);
		case 23:
			return this.precpred(this._ctx, 13);
		case 24:
			return this.precpred(this._ctx, 12);
		case 25:
			return this.precpred(this._ctx, 47);
		case 26:
			return this.precpred(this._ctx, 45);
		case 27:
			return this.precpred(this._ctx, 41);
		case 28:
			return this.precpred(this._ctx, 40);
		case 29:
			return this.notLineTerminator();
		case 30:
			return this.precpred(this._ctx, 39);
		case 31:
			return this.notLineTerminator();
		case 32:
			return this.precpred(this._ctx, 10);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.getter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.n("get");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.setter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.n("set");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.lineTerminatorAhead();
		case 36:
			return this.closeBrace();
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ECMAScriptParser = ECMAScriptParser;
